// This file was auto-generated by Fern from our API Definition.

package generated

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/skyflowapi/skyflow-go/v2/internal/generated/internal"
)

type GooglerpcStatus struct {
	Code    *int           `json:"code,omitempty" url:"code,omitempty"`
	Message *string        `json:"message,omitempty" url:"message,omitempty"`
	Details []*ProtobufAny `json:"details,omitempty" url:"details,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglerpcStatus) GetCode() *int {
	if g == nil {
		return nil
	}
	return g.Code
}

func (g *GooglerpcStatus) GetMessage() *string {
	if g == nil {
		return nil
	}
	return g.Message
}

func (g *GooglerpcStatus) GetDetails() []*ProtobufAny {
	if g == nil {
		return nil
	}
	return g.Details
}

func (g *GooglerpcStatus) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglerpcStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglerpcStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglerpcStatus(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglerpcStatus) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ProtobufAny struct {
	Type *string `json:"@type,omitempty" url:"@type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProtobufAny) GetType() *string {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *ProtobufAny) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProtobufAny) UnmarshalJSON(data []byte) error {
	type unmarshaler ProtobufAny
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProtobufAny(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProtobufAny) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Redaction type. Subject to policies assigned to the API caller. When used for detokenization, only supported for vaults that support [column groups](/tokenization-column-groups/).
type RedactionEnumRedaction string

const (
	RedactionEnumRedactionDefault   RedactionEnumRedaction = "DEFAULT"
	RedactionEnumRedactionRedacted  RedactionEnumRedaction = "REDACTED"
	RedactionEnumRedactionMasked    RedactionEnumRedaction = "MASKED"
	RedactionEnumRedactionPlainText RedactionEnumRedaction = "PLAIN_TEXT"
)

func NewRedactionEnumRedactionFromString(s string) (RedactionEnumRedaction, error) {
	switch s {
	case "DEFAULT":
		return RedactionEnumRedactionDefault, nil
	case "REDACTED":
		return RedactionEnumRedactionRedacted, nil
	case "MASKED":
		return RedactionEnumRedactionMasked, nil
	case "PLAIN_TEXT":
		return RedactionEnumRedactionPlainText, nil
	}
	var t RedactionEnumRedaction
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RedactionEnumRedaction) Ptr() *RedactionEnumRedaction {
	return &r
}

// Record values and tokens.
type V1FieldRecords struct {
	// Fields and values for the record. For example, `{'field_1':'value_1', 'field_2':'value_2'}`.
	Fields map[string]interface{} `json:"fields,omitempty" url:"fields,omitempty"`
	// Fields and tokens for the record. For example, `{'field_1':'token_1', 'field_2':'token_2'}`.
	Tokens map[string]interface{} `json:"tokens,omitempty" url:"tokens,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1FieldRecords) GetFields() map[string]interface{} {
	if v == nil {
		return nil
	}
	return v.Fields
}

func (v *V1FieldRecords) GetTokens() map[string]interface{} {
	if v == nil {
		return nil
	}
	return v.Tokens
}

func (v *V1FieldRecords) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1FieldRecords) UnmarshalJSON(data []byte) error {
	type unmarshaler V1FieldRecords
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1FieldRecords(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1FieldRecords) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
