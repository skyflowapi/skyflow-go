// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/skyflowapi/skyflow-go/v2/internal/generated/internal"
)

// Regular expressions to display in plaintext. Expressions must match the entirety of a detected entity, not just a substring, for the entity to display in plaintext. Expressions don't match across entity boundaries. If a string or entity matches both `allow_regex` and `restrict_regex`, the entity is displayed in plaintext.
type AllowRegex = []string

// ID of the Detect configuration to use for de-identification. Can't be specified with fields other than `vault_id`, `text`, and `file`.
type ConfigurationId = string

// Kinds of entities to de-identify. For details on specific entity types, how they're processed, and language support, see [Entity types and languages](/detect-entity-types).
type EntityType string

const (
	EntityTypeAccountNumber               EntityType = "account_number"
	EntityTypeAge                         EntityType = "age"
	EntityTypeAll                         EntityType = "all"
	EntityTypeBankAccount                 EntityType = "bank_account"
	EntityTypeBloodType                   EntityType = "blood_type"
	EntityTypeCondition                   EntityType = "condition"
	EntityTypeCorporateAction             EntityType = "corporate_action"
	EntityTypeCreditCard                  EntityType = "credit_card"
	EntityTypeCreditCardExpiration        EntityType = "credit_card_expiration"
	EntityTypeCvv                         EntityType = "cvv"
	EntityTypeDate                        EntityType = "date"
	EntityTypeDay                         EntityType = "day"
	EntityTypeDateInterval                EntityType = "date_interval"
	EntityTypeDob                         EntityType = "dob"
	EntityTypeDose                        EntityType = "dose"
	EntityTypeDriverLicense               EntityType = "driver_license"
	EntityTypeDrug                        EntityType = "drug"
	EntityTypeDuration                    EntityType = "duration"
	EntityTypeEffect                      EntityType = "effect"
	EntityTypeEmailAddress                EntityType = "email_address"
	EntityTypeEvent                       EntityType = "event"
	EntityTypeFilename                    EntityType = "filename"
	EntityTypeFinancialMetric             EntityType = "financial_metric"
	EntityTypeGender                      EntityType = "gender"
	EntityTypeHealthcareNumber            EntityType = "healthcare_number"
	EntityTypeInjury                      EntityType = "injury"
	EntityTypeIpAddress                   EntityType = "ip_address"
	EntityTypeLanguage                    EntityType = "language"
	EntityTypeLocation                    EntityType = "location"
	EntityTypeLocationAddress             EntityType = "location_address"
	EntityTypeLocationAddressStreet       EntityType = "location_address_street"
	EntityTypeLocationCity                EntityType = "location_city"
	EntityTypeLocationCoordinate          EntityType = "location_coordinate"
	EntityTypeLocationCountry             EntityType = "location_country"
	EntityTypeLocationState               EntityType = "location_state"
	EntityTypeLocationZip                 EntityType = "location_zip"
	EntityTypeMaritalStatus               EntityType = "marital_status"
	EntityTypeMedicalCode                 EntityType = "medical_code"
	EntityTypeMedicalProcess              EntityType = "medical_process"
	EntityTypeMoney                       EntityType = "money"
	EntityTypeMonth                       EntityType = "month"
	EntityTypeName                        EntityType = "name"
	EntityTypeNameFamily                  EntityType = "name_family"
	EntityTypeNameGiven                   EntityType = "name_given"
	EntityTypeNameMedicalProfessional     EntityType = "name_medical_professional"
	EntityTypeNumericalPii                EntityType = "numerical_pii"
	EntityTypeOccupation                  EntityType = "occupation"
	EntityTypeOrganization                EntityType = "organization"
	EntityTypeOrganizationId              EntityType = "organization_id"
	EntityTypeOrganizationMedicalFacility EntityType = "organization_medical_facility"
	EntityTypeOrigin                      EntityType = "origin"
	EntityTypePassportNumber              EntityType = "passport_number"
	EntityTypePassword                    EntityType = "password"
	EntityTypePhoneNumber                 EntityType = "phone_number"
	EntityTypeProject                     EntityType = "project"
	EntityTypePhysicalAttribute           EntityType = "physical_attribute"
	EntityTypePoliticalAffiliation        EntityType = "political_affiliation"
	EntityTypeProduct                     EntityType = "product"
	EntityTypeReligion                    EntityType = "religion"
	EntityTypeRoutingNumber               EntityType = "routing_number"
	EntityTypeSexuality                   EntityType = "sexuality"
	EntityTypeSsn                         EntityType = "ssn"
	EntityTypeStatistics                  EntityType = "statistics"
	EntityTypeTime                        EntityType = "time"
	EntityTypeTrend                       EntityType = "trend"
	EntityTypeUrl                         EntityType = "url"
	EntityTypeUsername                    EntityType = "username"
	EntityTypeVehicleId                   EntityType = "vehicle_id"
	EntityTypeYear                        EntityType = "year"
	EntityTypeZodiacSign                  EntityType = "zodiac_sign"
)

func NewEntityTypeFromString(s string) (EntityType, error) {
	switch s {
	case "account_number":
		return EntityTypeAccountNumber, nil
	case "age":
		return EntityTypeAge, nil
	case "all":
		return EntityTypeAll, nil
	case "bank_account":
		return EntityTypeBankAccount, nil
	case "blood_type":
		return EntityTypeBloodType, nil
	case "condition":
		return EntityTypeCondition, nil
	case "corporate_action":
		return EntityTypeCorporateAction, nil
	case "credit_card":
		return EntityTypeCreditCard, nil
	case "credit_card_expiration":
		return EntityTypeCreditCardExpiration, nil
	case "cvv":
		return EntityTypeCvv, nil
	case "date":
		return EntityTypeDate, nil
	case "day":
		return EntityTypeDay, nil
	case "date_interval":
		return EntityTypeDateInterval, nil
	case "dob":
		return EntityTypeDob, nil
	case "dose":
		return EntityTypeDose, nil
	case "driver_license":
		return EntityTypeDriverLicense, nil
	case "drug":
		return EntityTypeDrug, nil
	case "duration":
		return EntityTypeDuration, nil
	case "effect":
		return EntityTypeEffect, nil
	case "email_address":
		return EntityTypeEmailAddress, nil
	case "event":
		return EntityTypeEvent, nil
	case "filename":
		return EntityTypeFilename, nil
	case "financial_metric":
		return EntityTypeFinancialMetric, nil
	case "gender":
		return EntityTypeGender, nil
	case "healthcare_number":
		return EntityTypeHealthcareNumber, nil
	case "injury":
		return EntityTypeInjury, nil
	case "ip_address":
		return EntityTypeIpAddress, nil
	case "language":
		return EntityTypeLanguage, nil
	case "location":
		return EntityTypeLocation, nil
	case "location_address":
		return EntityTypeLocationAddress, nil
	case "location_address_street":
		return EntityTypeLocationAddressStreet, nil
	case "location_city":
		return EntityTypeLocationCity, nil
	case "location_coordinate":
		return EntityTypeLocationCoordinate, nil
	case "location_country":
		return EntityTypeLocationCountry, nil
	case "location_state":
		return EntityTypeLocationState, nil
	case "location_zip":
		return EntityTypeLocationZip, nil
	case "marital_status":
		return EntityTypeMaritalStatus, nil
	case "medical_code":
		return EntityTypeMedicalCode, nil
	case "medical_process":
		return EntityTypeMedicalProcess, nil
	case "money":
		return EntityTypeMoney, nil
	case "month":
		return EntityTypeMonth, nil
	case "name":
		return EntityTypeName, nil
	case "name_family":
		return EntityTypeNameFamily, nil
	case "name_given":
		return EntityTypeNameGiven, nil
	case "name_medical_professional":
		return EntityTypeNameMedicalProfessional, nil
	case "numerical_pii":
		return EntityTypeNumericalPii, nil
	case "occupation":
		return EntityTypeOccupation, nil
	case "organization":
		return EntityTypeOrganization, nil
	case "organization_id":
		return EntityTypeOrganizationId, nil
	case "organization_medical_facility":
		return EntityTypeOrganizationMedicalFacility, nil
	case "origin":
		return EntityTypeOrigin, nil
	case "passport_number":
		return EntityTypePassportNumber, nil
	case "password":
		return EntityTypePassword, nil
	case "phone_number":
		return EntityTypePhoneNumber, nil
	case "project":
		return EntityTypeProject, nil
	case "physical_attribute":
		return EntityTypePhysicalAttribute, nil
	case "political_affiliation":
		return EntityTypePoliticalAffiliation, nil
	case "product":
		return EntityTypeProduct, nil
	case "religion":
		return EntityTypeReligion, nil
	case "routing_number":
		return EntityTypeRoutingNumber, nil
	case "sexuality":
		return EntityTypeSexuality, nil
	case "ssn":
		return EntityTypeSsn, nil
	case "statistics":
		return EntityTypeStatistics, nil
	case "time":
		return EntityTypeTime, nil
	case "trend":
		return EntityTypeTrend, nil
	case "url":
		return EntityTypeUrl, nil
	case "username":
		return EntityTypeUsername, nil
	case "vehicle_id":
		return EntityTypeVehicleId, nil
	case "year":
		return EntityTypeYear, nil
	case "zodiac_sign":
		return EntityTypeZodiacSign, nil
	}
	var t EntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntityType) Ptr() *EntityType {
	return &e
}

// Entities to detect and de-identify.
type EntityTypes = []EntityType

type ErrorResponse struct {
	Error *ErrorResponseError `json:"error" url:"error"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ErrorResponse) GetError() *ErrorResponseError {
	if e == nil {
		return nil
	}
	return e.Error
}

func (e *ErrorResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorResponseError struct {
	// gRPC status codes. See https://grpc.io/docs/guides/status-codes.
	GrpcCode int `json:"grpc_code" url:"grpc_code"`
	// HTTP status codes. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status.
	HttpCode int `json:"http_code" url:"http_code"`
	// HTTP status message.
	HttpStatus string                   `json:"http_status" url:"http_status"`
	Message    string                   `json:"message" url:"message"`
	Details    []map[string]interface{} `json:"details,omitempty" url:"details,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ErrorResponseError) GetGrpcCode() int {
	if e == nil {
		return 0
	}
	return e.GrpcCode
}

func (e *ErrorResponseError) GetHttpCode() int {
	if e == nil {
		return 0
	}
	return e.HttpCode
}

func (e *ErrorResponseError) GetHttpStatus() string {
	if e == nil {
		return ""
	}
	return e.HttpStatus
}

func (e *ErrorResponseError) GetMessage() string {
	if e == nil {
		return ""
	}
	return e.Message
}

func (e *ErrorResponseError) GetDetails() []map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.Details
}

func (e *ErrorResponseError) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorResponseError) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorResponseError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorResponseError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorResponseError) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Error message.
type ErrorString = string

type GooglerpcStatus struct {
	Code    *int           `json:"code,omitempty" url:"code,omitempty"`
	Message *string        `json:"message,omitempty" url:"message,omitempty"`
	Details []*ProtobufAny `json:"details,omitempty" url:"details,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglerpcStatus) GetCode() *int {
	if g == nil {
		return nil
	}
	return g.Code
}

func (g *GooglerpcStatus) GetMessage() *string {
	if g == nil {
		return nil
	}
	return g.Message
}

func (g *GooglerpcStatus) GetDetails() []*ProtobufAny {
	if g == nil {
		return nil
	}
	return g.Details
}

func (g *GooglerpcStatus) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglerpcStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglerpcStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglerpcStatus(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglerpcStatus) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ProtobufAny struct {
	Type *string `json:"@type,omitempty" url:"@type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProtobufAny) GetType() *string {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *ProtobufAny) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProtobufAny) UnmarshalJSON(data []byte) error {
	type unmarshaler ProtobufAny
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProtobufAny(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProtobufAny) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Redaction type. Subject to policies assigned to the API caller. When used for detokenization, only supported for vaults that support [column groups](/tokenization-column-groups/).
type RedactionEnumRedaction string

const (
	RedactionEnumRedactionDefault   RedactionEnumRedaction = "DEFAULT"
	RedactionEnumRedactionRedacted  RedactionEnumRedaction = "REDACTED"
	RedactionEnumRedactionMasked    RedactionEnumRedaction = "MASKED"
	RedactionEnumRedactionPlainText RedactionEnumRedaction = "PLAIN_TEXT"
)

func NewRedactionEnumRedactionFromString(s string) (RedactionEnumRedaction, error) {
	switch s {
	case "DEFAULT":
		return RedactionEnumRedactionDefault, nil
	case "REDACTED":
		return RedactionEnumRedactionRedacted, nil
	case "MASKED":
		return RedactionEnumRedactionMasked, nil
	case "PLAIN_TEXT":
		return RedactionEnumRedactionPlainText, nil
	}
	var t RedactionEnumRedaction
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RedactionEnumRedaction) Ptr() *RedactionEnumRedaction {
	return &r
}

// Regular expressions to replace with '[RESTRICTED]'. Expressions must match the entirety of a detected entity, not just a substring, for the entity to be restricted. Expressions don't match across entity boundaries. If a string or entity matches both `allow_regex` and `restrict_regex`, the entity is displayed in plaintext.
type RestrictRegex = []string

// Transformations to apply to the detected entities.
type Transformations struct {
	// Shift dates by a specified number of days.
	ShiftDates *TransformationsShiftDates `json:"shift_dates,omitempty" url:"shift_dates,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Transformations) GetShiftDates() *TransformationsShiftDates {
	if t == nil {
		return nil
	}
	return t.ShiftDates
}

func (t *Transformations) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Transformations) UnmarshalJSON(data []byte) error {
	type unmarshaler Transformations
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Transformations(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Transformations) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Shift dates by a specified number of days.
type TransformationsShiftDates struct {
	// Maximum number of days to shift the date by.
	MaxDays *int `json:"max_days,omitempty" url:"max_days,omitempty"`
	// Minimum number of days to shift the date by.
	MinDays *int `json:"min_days,omitempty" url:"min_days,omitempty"`
	// Entity types to shift dates for.
	EntityTypes []TransformationsShiftDatesEntityTypesItem `json:"entity_types,omitempty" url:"entity_types,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransformationsShiftDates) GetMaxDays() *int {
	if t == nil {
		return nil
	}
	return t.MaxDays
}

func (t *TransformationsShiftDates) GetMinDays() *int {
	if t == nil {
		return nil
	}
	return t.MinDays
}

func (t *TransformationsShiftDates) GetEntityTypes() []TransformationsShiftDatesEntityTypesItem {
	if t == nil {
		return nil
	}
	return t.EntityTypes
}

func (t *TransformationsShiftDates) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransformationsShiftDates) UnmarshalJSON(data []byte) error {
	type unmarshaler TransformationsShiftDates
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransformationsShiftDates(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransformationsShiftDates) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TransformationsShiftDatesEntityTypesItem string

const (
	TransformationsShiftDatesEntityTypesItemDate         TransformationsShiftDatesEntityTypesItem = "date"
	TransformationsShiftDatesEntityTypesItemDateInterval TransformationsShiftDatesEntityTypesItem = "date_interval"
	TransformationsShiftDatesEntityTypesItemDob          TransformationsShiftDatesEntityTypesItem = "dob"
)

func NewTransformationsShiftDatesEntityTypesItemFromString(s string) (TransformationsShiftDatesEntityTypesItem, error) {
	switch s {
	case "date":
		return TransformationsShiftDatesEntityTypesItemDate, nil
	case "date_interval":
		return TransformationsShiftDatesEntityTypesItemDateInterval, nil
	case "dob":
		return TransformationsShiftDatesEntityTypesItemDob, nil
	}
	var t TransformationsShiftDatesEntityTypesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TransformationsShiftDatesEntityTypesItem) Ptr() *TransformationsShiftDatesEntityTypesItem {
	return &t
}

// Record values and tokens.
type V1FieldRecords struct {
	// Fields and values for the record. For example, `{'field_1':'value_1', 'field_2':'value_2'}`.
	Fields map[string]interface{} `json:"fields,omitempty" url:"fields,omitempty"`
	// Fields and tokens for the record. For example, `{'field_1':'token_1', 'field_2':'token_2'}`.
	Tokens map[string]interface{} `json:"tokens,omitempty" url:"tokens,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1FieldRecords) GetFields() map[string]interface{} {
	if v == nil {
		return nil
	}
	return v.Fields
}

func (v *V1FieldRecords) GetTokens() map[string]interface{} {
	if v == nil {
		return nil
	}
	return v.Tokens
}

func (v *V1FieldRecords) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1FieldRecords) UnmarshalJSON(data []byte) error {
	type unmarshaler V1FieldRecords
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1FieldRecords(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1FieldRecords) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// ID of a vault you have Detect Invoker or Vault Owner permissions for.
type VaultId = string
