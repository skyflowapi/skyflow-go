// Code generated by Fern. DO NOT EDIT.

package records

import (
	context "context"
	generated "github.com/skyflowapi/skyflow-go/v2/internal/generated"
	core "github.com/skyflowapi/skyflow-go/v2/internal/generated/core"
	internal "github.com/skyflowapi/skyflow-go/v2/internal/generated/internal"
	option "github.com/skyflowapi/skyflow-go/v2/internal/generated/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Performs multiple record operations in a single transaction.
func (c *Client) RecordServiceBatchOperation(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	request *generated.RecordServiceBatchOperationBody,
	opts ...option.RequestOption,
) (*generated.V1BatchOperationResponse, error) {
	response, err := c.WithRawResponse.RecordServiceBatchOperation(
		ctx,
		vaultId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Gets the specified records from a table.
func (c *Client) RecordServiceBulkGetRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table that contains the records.
	objectName string,
	request *generated.RecordServiceBulkGetRecordRequest,
	opts ...option.RequestOption,
) (*generated.V1BulkGetRecordResponse, error) {
	response, err := c.WithRawResponse.RecordServiceBulkGetRecord(
		ctx,
		vaultId,
		objectName,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Inserts a record in the specified table.<br /><br />The time-to-live (TTL) for a transient field begins when the field value is set during record insertion.<br /><br />Columns that have a string data type and a uniqueness constraint accept strings up to 2500 characters. If an inserted string exceeds 2500 characters, the call returns a token insertion error.
func (c *Client) RecordServiceInsertRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	request *generated.RecordServiceInsertRecordBody,
	opts ...option.RequestOption,
) (*generated.V1InsertRecordResponse, error) {
	response, err := c.WithRawResponse.RecordServiceInsertRecord(
		ctx,
		vaultId,
		objectName,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes the specified records from a table.
func (c *Client) RecordServiceBulkDeleteRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	request *generated.RecordServiceBulkDeleteRecordBody,
	opts ...option.RequestOption,
) (*generated.V1BulkDeleteRecordResponse, error) {
	response, err := c.WithRawResponse.RecordServiceBulkDeleteRecord(
		ctx,
		vaultId,
		objectName,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns the specified record from a table.
func (c *Client) RecordServiceGetRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	// `skyflow_id` of the record.
	id string,
	request *generated.RecordServiceGetRecordRequest,
	opts ...option.RequestOption,
) (*generated.V1FieldRecords, error) {
	response, err := c.WithRawResponse.RecordServiceGetRecord(
		ctx,
		vaultId,
		objectName,
		id,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates the specified record in a table.<br /><br />When you update a field, include the entire contents you want the field to store. For JSON fields, include all nested fields and values. If a nested field isn't included, it's removed.<br /><br />The time-to-live (TTL) for a transient field resets when the field value is updated.
func (c *Client) RecordServiceUpdateRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	// `skyflow_id` of the record.
	id string,
	request *generated.RecordServiceUpdateRecordBody,
	opts ...option.RequestOption,
) (*generated.V1UpdateRecordResponse, error) {
	response, err := c.WithRawResponse.RecordServiceUpdateRecord(
		ctx,
		vaultId,
		objectName,
		id,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes the specified record from a table.<br /><br /><b>Note:</b> This method doesn't delete transient field tokens. Transient field values are available until they expire based on the fields' time-to-live (TTL) setting.
func (c *Client) RecordServiceDeleteRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	// `skyflow_id` of the record to delete.
	id string,
	opts ...option.RequestOption,
) (*generated.V1DeleteRecordResponse, error) {
	response, err := c.WithRawResponse.RecordServiceDeleteRecord(
		ctx,
		vaultId,
		objectName,
		id,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Uploads a file to the specified record.
func (c *Client) FileServiceUploadFile(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	// `skyflow_id` of the record.
	id string,
	request *generated.FileServiceUploadFileRequest,
	opts ...option.RequestOption,
) (*generated.V1UpdateRecordResponse, error) {
	response, err := c.WithRawResponse.FileServiceUploadFile(
		ctx,
		vaultId,
		objectName,
		id,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes a file from the specified record.
func (c *Client) FileServiceDeleteFile(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	tableName string,
	// `skyflow_id` of the record.
	id string,
	// Name of the column that contains the file.
	columnName string,
	opts ...option.RequestOption,
) (*generated.V1DeleteFileResponse, error) {
	response, err := c.WithRawResponse.FileServiceDeleteFile(
		ctx,
		vaultId,
		tableName,
		id,
		columnName,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns the anti-virus scan status of a file.
func (c *Client) FileServiceGetFileScanStatus(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	tableName string,
	// `skyflow_id` of the record.
	id string,
	// Name of the column that contains the file.
	columnName string,
	opts ...option.RequestOption,
) (*generated.V1GetFileScanStatusResponse, error) {
	response, err := c.WithRawResponse.FileServiceGetFileScanStatus(
		ctx,
		vaultId,
		tableName,
		id,
		columnName,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
