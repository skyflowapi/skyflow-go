// This file was auto-generated by Fern from our API Definition.

package records

import (
	context "context"
	io "io"
	http "net/http"

	skyflowferngo "github.com/skyflowapi/skyflow-go/v2/internal/generated"
	core "github.com/skyflowapi/skyflow-go/v2/internal/generated/core"
	internal "github.com/skyflowapi/skyflow-go/v2/internal/generated/internal"
	option "github.com/skyflowapi/skyflow-go/v2/internal/generated/option"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Performs multiple record operations in a single transaction.
func (c *Client) RecordServiceBatchOperation(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	request *skyflowferngo.RecordServiceBatchOperationBody,
	opts ...option.RequestOption,
) (*skyflowferngo.V1BatchOperationResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v",
		vaultId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *skyflowferngo.V1BatchOperationResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Gets the specified records from a table.
func (c *Client) RecordServiceBulkGetRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table that contains the records.
	objectName string,
	request *skyflowferngo.RecordServiceBulkGetRecordRequest,
	opts ...option.RequestOption,
) (*skyflowferngo.V1BulkGetRecordResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v/%v",
		vaultId,
		objectName,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *skyflowferngo.V1BulkGetRecordResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Inserts a record in the specified table.<br /><br />The time-to-live (TTL) for a transient field begins when the field value is set during record insertion.<br /><br />Columns that have a string data type and a uniqueness constraint accept strings up to 2500 characters. If an inserted string exceeds 2500 characters, the call returns a token insertion error.
func (c *Client) RecordServiceInsertRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	request *skyflowferngo.RecordServiceInsertRecordBody,
	opts ...option.RequestOption,
) (*skyflowferngo.V1InsertRecordResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v/%v",
		vaultId,
		objectName,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *skyflowferngo.V1InsertRecordResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes the specified records from a table.
func (c *Client) RecordServiceBulkDeleteRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	request *skyflowferngo.RecordServiceBulkDeleteRecordBody,
	opts ...option.RequestOption,
) (*skyflowferngo.V1BulkDeleteRecordResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v/%v",
		vaultId,
		objectName,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *skyflowferngo.V1BulkDeleteRecordResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns the specified record from a table.
func (c *Client) RecordServiceGetRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	// `skyflow_id` of the record.
	id string,
	request *skyflowferngo.RecordServiceGetRecordRequest,
	opts ...option.RequestOption,
) (*skyflowferngo.V1FieldRecords, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v/%v/%v",
		vaultId,
		objectName,
		id,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *skyflowferngo.V1FieldRecords
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates the specified record in a table.<br /><br />When you update a field, include the entire contents you want the field to store. For JSON fields, include all nested fields and values. If a nested field isn't included, it's removed.<br /><br />The time-to-live (TTL) for a transient field resets when the field value is updated.
func (c *Client) RecordServiceUpdateRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	// `skyflow_id` of the record.
	id string,
	request *skyflowferngo.RecordServiceUpdateRecordBody,
	opts ...option.RequestOption,
) (*skyflowferngo.V1UpdateRecordResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v/%v/%v",
		vaultId,
		objectName,
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *skyflowferngo.V1UpdateRecordResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes the specified record from a table.<br /><br /><b>Note:</b> This method doesn't delete transient field tokens. Transient field values are available until they expire based on the fields' time-to-live (TTL) setting.
func (c *Client) RecordServiceDeleteRecord(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	// `skyflow_id` of the record to delete.
	id string,
	opts ...option.RequestOption,
) (*skyflowferngo.V1DeleteRecordResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v/%v/%v",
		vaultId,
		objectName,
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *skyflowferngo.V1DeleteRecordResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Uploads a file to the specified record.
func (c *Client) FileServiceUploadFile(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	objectName string,
	// `skyflow_id` of the record.
	id string,
	fileColumnName io.Reader,
	opts ...option.RequestOption,
) (*skyflowferngo.V1UpdateRecordResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v/%v/%v/files",
		vaultId,
		objectName,
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}
	writer := internal.NewMultipartWriter()
	if fileColumnName != nil {
		if err := writer.WriteFile("fileColumnName", fileColumnName); err != nil {
			return nil, err
		}
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.ContentType())

	var response *skyflowferngo.V1UpdateRecordResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         writer.Buffer(),
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes a file from the specified record.
func (c *Client) FileServiceDeleteFile(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	tableName string,
	// `skyflow_id` of the record.
	id string,
	// Name of the column that contains the file.
	columnName string,
	opts ...option.RequestOption,
) (*skyflowferngo.V1DeleteFileResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v/%v/%v/files/%v",
		vaultId,
		tableName,
		id,
		columnName,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *skyflowferngo.V1DeleteFileResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns the anti-virus scan status of a file.
func (c *Client) FileServiceGetFileScanStatus(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	// Name of the table.
	tableName string,
	// `skyflow_id` of the record.
	id string,
	// Name of the column that contains the file.
	columnName string,
	opts ...option.RequestOption,
) (*skyflowferngo.V1GetFileScanStatusResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v/%v/%v/files/%v/scan-status",
		vaultId,
		tableName,
		id,
		columnName,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *skyflowferngo.V1GetFileScanStatusResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
