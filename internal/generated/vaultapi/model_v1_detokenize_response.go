/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the V1DetokenizeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DetokenizeResponse{}

// V1DetokenizeResponse struct for V1DetokenizeResponse
type V1DetokenizeResponse struct {
	// Records corresponding to the specified tokens.
	Records []V1DetokenizeRecordResponse `json:"records,omitempty"`
}

// NewV1DetokenizeResponse instantiates a new V1DetokenizeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DetokenizeResponse() *V1DetokenizeResponse {
	this := V1DetokenizeResponse{}
	return &this
}

// NewV1DetokenizeResponseWithDefaults instantiates a new V1DetokenizeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DetokenizeResponseWithDefaults() *V1DetokenizeResponse {
	this := V1DetokenizeResponse{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *V1DetokenizeResponse) GetRecords() []V1DetokenizeRecordResponse {
	if o == nil || IsNil(o.Records) {
		var ret []V1DetokenizeRecordResponse
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DetokenizeResponse) GetRecordsOk() ([]V1DetokenizeRecordResponse, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *V1DetokenizeResponse) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []V1DetokenizeRecordResponse and assigns it to the Records field.
func (o *V1DetokenizeResponse) SetRecords(v []V1DetokenizeRecordResponse) {
	o.Records = v
}

func (o V1DetokenizeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DetokenizeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	return toSerialize, nil
}

type NullableV1DetokenizeResponse struct {
	value *V1DetokenizeResponse
	isSet bool
}

func (v NullableV1DetokenizeResponse) Get() *V1DetokenizeResponse {
	return v.value
}

func (v *NullableV1DetokenizeResponse) Set(val *V1DetokenizeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DetokenizeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DetokenizeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DetokenizeResponse(val *V1DetokenizeResponse) *NullableV1DetokenizeResponse {
	return &NullableV1DetokenizeResponse{value: val, isSet: true}
}

func (v NullableV1DetokenizeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DetokenizeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


