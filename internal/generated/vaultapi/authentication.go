// This file was auto-generated by Fern from our API Definition.

package vaultapi

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/skyflowapi/skyflow-go/v2/internal/generated/vaultapi/internal"
)

type V1GetAuthTokenRequest struct {
	// Grant type of the request. Set this to `urn:ietf:params:oauth:grant-type:jwt-bearer`.
	GrantType string `json:"grant_type" url:"-"`
	// User-signed JWT token that contains the following fields: <br/> <ul><li><code>iss</code>: Issuer of the JWT.</li><li><code>key</code>: Unique identifier for the key.</li><li><code>aud</code>: Recipient the JWT is intended for.</li><li><code>exp</code>: Time the JWT expires.</li><li><code>sub</code>: Subject of the JWT.</li><li><code>ctx</code>: (Optional) Value for <a href='/context-aware-overview/'>Context-aware authorization</a>.</li></ul>
	Assertion string `json:"assertion" url:"-"`
	// Subject token.
	SubjectToken *string `json:"subject_token,omitempty" url:"-"`
	// Subject token type.
	SubjectTokenType *string `json:"subject_token_type,omitempty" url:"-"`
	// Token use type. Either `delegation` or `impersonation`.
	RequestedTokenUse *string `json:"requested_token_use,omitempty" url:"-"`
	// Subset of available <a href='#Roles'>roles</a> to associate with the requested token. Uses the format "role:\<roleID1\> role:\<roleID2\>".
	Scope *string `json:"scope,omitempty" url:"-"`
}

type V1GetAuthTokenResponse struct {
	// AccessToken.
	AccessToken *string `json:"accessToken,omitempty" url:"accessToken,omitempty"`
	// TokenType : Bearer.
	TokenType *string `json:"tokenType,omitempty" url:"tokenType,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1GetAuthTokenResponse) GetAccessToken() *string {
	if v == nil {
		return nil
	}
	return v.AccessToken
}

func (v *V1GetAuthTokenResponse) GetTokenType() *string {
	if v == nil {
		return nil
	}
	return v.TokenType
}

func (v *V1GetAuthTokenResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1GetAuthTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler V1GetAuthTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1GetAuthTokenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1GetAuthTokenResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
