// This file was auto-generated by Fern from our API Definition.

package query

import (
	context "context"
	skyflowferngo "github.com/skyflowapi/skyflow-go/v2/internal/generated/vaultapi"
	core "github.com/skyflowapi/skyflow-go/v2/internal/generated/vaultapi/core"
	internal "github.com/skyflowapi/skyflow-go/v2/internal/generated/vaultapi/internal"
	option "github.com/skyflowapi/skyflow-go/v2/internal/generated/vaultapi/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Returns records for a valid SQL query. This endpoint <ul><li>Can return redacted record values.</li><li>Supports only the <code>SELECT</code> command.</li><li>Returns a maximum of 25 records. To return additional records, perform another query using the <code>OFFSET</code> keyword.</li><li>Can't modify the vault or perform transactions.</li><li>Can't return tokens.</li><li>Can't return file download or render URLs.</li><li>Doesn't support the <code>WHERE</code> keyword with columns using transient tokenization.</li><li>Doesn't support `?` conditional for columns with column-level encryption disabled.</li><ul>
func (c *Client) QueryServiceExecuteQuery(
	ctx context.Context,
	// ID of the vault.
	vaultId string,
	request *skyflowferngo.QueryServiceExecuteQueryBody,
	opts ...option.RequestOption,
) (*skyflowferngo.V1GetQueryResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://identifier.vault.skyflowapis.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/vaults/%v/query",
		vaultId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &skyflowferngo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *skyflowferngo.V1GetQueryResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
