/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
	"fmt"
)

// ContextAuthMode Authentication mode the `actor` used.
type ContextAuthMode string

// List of ContextAuthMode
const (
	CONTEXTAUTHMODE_AUTH_NONE           ContextAuthMode = "AUTH_NONE"
	CONTEXTAUTHMODE_OKTA_JWT            ContextAuthMode = "OKTA_JWT"
	CONTEXTAUTHMODE_SERVICE_ACCOUNT_JWT ContextAuthMode = "SERVICE_ACCOUNT_JWT"
	CONTEXTAUTHMODE_PAT_JWT             ContextAuthMode = "PAT_JWT"
)

// All allowed values of ContextAuthMode enum
var AllowedContextAuthModeEnumValues = []ContextAuthMode{
	"AUTH_NONE",
	"OKTA_JWT",
	"SERVICE_ACCOUNT_JWT",
	"PAT_JWT",
}

func (v *ContextAuthMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContextAuthMode(value)
	for _, existing := range AllowedContextAuthModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContextAuthMode", value)
}

// NewContextAuthModeFromValue returns a pointer to a valid ContextAuthMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContextAuthModeFromValue(v string) (*ContextAuthMode, error) {
	ev := ContextAuthMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContextAuthMode: valid values are %v", v, AllowedContextAuthModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContextAuthMode) IsValid() bool {
	for _, existing := range AllowedContextAuthModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContextAuthMode value
func (v ContextAuthMode) Ptr() *ContextAuthMode {
	return &v
}

type NullableContextAuthMode struct {
	value *ContextAuthMode
	isSet bool
}

func (v NullableContextAuthMode) Get() *ContextAuthMode {
	return v.value
}

func (v *NullableContextAuthMode) Set(val *ContextAuthMode) {
	v.value = val
	v.isSet = true
}

func (v NullableContextAuthMode) IsSet() bool {
	return v.isSet
}

func (v *NullableContextAuthMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextAuthMode(val *ContextAuthMode) *NullableContextAuthMode {
	return &NullableContextAuthMode{value: val, isSet: true}
}

func (v NullableContextAuthMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextAuthMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

