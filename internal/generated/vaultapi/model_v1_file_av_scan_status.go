/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
	"fmt"
)

// V1FileAVScanStatus Anti-virus scan status of the file.
type V1FileAVScanStatus string

// List of v1FileAVScanStatus
const (
	V1FILEAVSCANSTATUS_NONE           V1FileAVScanStatus = "SCAN_NONE"
	V1FILEAVSCANSTATUS_CLEAN          V1FileAVScanStatus = "SCAN_CLEAN"
	V1FILEAVSCANSTATUS_INFECTED       V1FileAVScanStatus = "SCAN_INFECTED"
	V1FILEAVSCANSTATUS_DELETED        V1FileAVScanStatus = "SCAN_DELETED"
	V1FILEAVSCANSTATUS_ERROR          V1FileAVScanStatus = "SCAN_ERROR"
	V1FILEAVSCANSTATUS_PENDING        V1FileAVScanStatus = "SCAN_PENDING"
	V1FILEAVSCANSTATUS_UNSCANNABLE    V1FileAVScanStatus = "SCAN_UNSCANNABLE"
	V1FILEAVSCANSTATUS_FILE_NOT_FOUND V1FileAVScanStatus = "SCAN_FILE_NOT_FOUND"
	V1FILEAVSCANSTATUS_INVALID        V1FileAVScanStatus = "SCAN_INVALID"
)

// All allowed values of V1FileAVScanStatus enum
var AllowedV1FileAVScanStatusEnumValues = []V1FileAVScanStatus{
	"SCAN_NONE",
	"SCAN_CLEAN",
	"SCAN_INFECTED",
	"SCAN_DELETED",
	"SCAN_ERROR",
	"SCAN_PENDING",
	"SCAN_UNSCANNABLE",
	"SCAN_FILE_NOT_FOUND",
	"SCAN_INVALID",
}

func (v *V1FileAVScanStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1FileAVScanStatus(value)
	for _, existing := range AllowedV1FileAVScanStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1FileAVScanStatus", value)
}

// NewV1FileAVScanStatusFromValue returns a pointer to a valid V1FileAVScanStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1FileAVScanStatusFromValue(v string) (*V1FileAVScanStatus, error) {
	ev := V1FileAVScanStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1FileAVScanStatus: valid values are %v", v, AllowedV1FileAVScanStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1FileAVScanStatus) IsValid() bool {
	for _, existing := range AllowedV1FileAVScanStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1FileAVScanStatus value
func (v V1FileAVScanStatus) Ptr() *V1FileAVScanStatus {
	return &v
}

type NullableV1FileAVScanStatus struct {
	value *V1FileAVScanStatus
	isSet bool
}

func (v NullableV1FileAVScanStatus) Get() *V1FileAVScanStatus {
	return v.value
}

func (v *NullableV1FileAVScanStatus) Set(val *V1FileAVScanStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1FileAVScanStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1FileAVScanStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1FileAVScanStatus(val *V1FileAVScanStatus) *NullableV1FileAVScanStatus {
	return &NullableV1FileAVScanStatus{value: val, isSet: true}
}

func (v NullableV1FileAVScanStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1FileAVScanStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

