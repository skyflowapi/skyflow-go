// This file was auto-generated by Fern from our API Definition.

package vaultapi

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/skyflowapi/skyflow-go/v2/internal/generated/vaultapi/internal"
)

type AuditServiceListAuditEventsRequest struct {
	// ID for the audit event.
	FilterOpsContextChangeId *string `json:"-" url:"filterOps.context.changeID,omitempty"`
	// ID for the request that caused the event.
	FilterOpsContextRequestId *string `json:"-" url:"filterOps.context.requestID,omitempty"`
	// ID for the request set by the service that received the request.
	FilterOpsContextTraceId *string `json:"-" url:"filterOps.context.traceID,omitempty"`
	// ID for the session in which the request was sent.
	FilterOpsContextSessionId *string `json:"-" url:"filterOps.context.sessionID,omitempty"`
	// Member who sent the request. Depending on `actorType`, this may be a user ID or a service account ID.
	FilterOpsContextActor *string `json:"-" url:"filterOps.context.actor,omitempty"`
	// Type of member who sent the request.
	FilterOpsContextActorType *AuditServiceListAuditEventsRequestFilterOpsContextActorType `json:"-" url:"filterOps.context.actorType,omitempty"`
	// Type of access for the request.
	FilterOpsContextAccessType *AuditServiceListAuditEventsRequestFilterOpsContextAccessType `json:"-" url:"filterOps.context.accessType,omitempty"`
	// IP Address of the client that made the request.
	FilterOpsContextIpAddress *string `json:"-" url:"filterOps.context.ipAddress,omitempty"`
	// HTTP Origin request header (including scheme, hostname, and port) of the request.
	FilterOpsContextOrigin *string `json:"-" url:"filterOps.context.origin,omitempty"`
	// Authentication mode the `actor` used.
	FilterOpsContextAuthMode *AuditServiceListAuditEventsRequestFilterOpsContextAuthMode `json:"-" url:"filterOps.context.authMode,omitempty"`
	// ID of the JWT token.
	FilterOpsContextJwtId *string `json:"-" url:"filterOps.context.jwtID,omitempty"`
	// Embedded User Context.
	FilterOpsContextBearerTokenContextId *string `json:"-" url:"filterOps.context.bearerTokenContextID,omitempty"`
	// Resources with the specified parent account ID.
	FilterOpsParentAccountId *string `json:"-" url:"filterOps.parentAccountID,omitempty"`
	// Resources with the specified account ID.
	FilterOpsAccountId string `json:"-" url:"filterOps.accountID"`
	// Resources with the specified workspace ID.
	FilterOpsWorkspaceId *string `json:"-" url:"filterOps.workspaceID,omitempty"`
	// Resources with the specified vault ID.
	FilterOpsVaultId *string `json:"-" url:"filterOps.vaultID,omitempty"`
	// Resources with a specified ID. If a resource matches at least one ID, the associated event is returned. Format is a comma-separated list of "\<resourceType\>/\<resourceID\>". For example, "VAULT/12345, USER/67890".
	FilterOpsResourceIDs *string `json:"-" url:"filterOps.resourceIDs,omitempty"`
	// Events with the specified action type.
	FilterOpsActionType *AuditServiceListAuditEventsRequestFilterOpsActionType `json:"-" url:"filterOps.actionType,omitempty"`
	// Resources with the specified type.
	FilterOpsResourceType *AuditServiceListAuditEventsRequestFilterOpsResourceType `json:"-" url:"filterOps.resourceType,omitempty"`
	// Events with associated tags. If an event matches at least one tag, the event is returned. Comma-separated list. For example, "login, get".
	FilterOpsTags *string `json:"-" url:"filterOps.tags,omitempty"`
	// HTTP response code of the request.
	FilterOpsResponseCode *int `json:"-" url:"filterOps.responseCode,omitempty"`
	// Start timestamp for the query, in SQL format.
	FilterOpsStartTime *string `json:"-" url:"filterOps.startTime,omitempty"`
	// End timestamp for the query, in SQL format.
	FilterOpsEndTime *string `json:"-" url:"filterOps.endTime,omitempty"`
	// Name of the API called in the request.
	FilterOpsApiName *string `json:"-" url:"filterOps.apiName,omitempty"`
	// Response message of the request.
	FilterOpsResponseMessage *string `json:"-" url:"filterOps.responseMessage,omitempty"`
	// HTTP method of the request.
	FilterOpsHttpMethod *string `json:"-" url:"filterOps.httpMethod,omitempty"`
	// HTTP URI of the request.
	FilterOpsHttpUri *string `json:"-" url:"filterOps.httpURI,omitempty"`
	// Fully-qualified field by which to sort results. Field names should be in camel case (for example, "capitalization.camelCase").
	SortOpsSortBy *string `json:"-" url:"sortOps.sortBy,omitempty"`
	// Ascending or descending ordering of results.
	SortOpsOrderBy *AuditServiceListAuditEventsRequestSortOpsOrderBy `json:"-" url:"sortOps.orderBy,omitempty"`
	// Timestamp provided in the previous audit response's `nextOps` attribute. An alternate way to manage response pagination. Can't be used with `sortOps` or `offset`. For the first request in a series of audit requests, leave blank.
	AfterOpsTimestamp *string `json:"-" url:"afterOps.timestamp,omitempty"`
	// Change ID provided in the previous audit response's `nextOps` attribute. An alternate way to manage response pagination. Can't be used with `sortOps` or `offset`. For the first request in a series of audit requests, leave blank.
	AfterOpsChangeId *string `json:"-" url:"afterOps.changeID,omitempty"`
	// Number of results to return.
	Limit *int64 `json:"-" url:"limit,omitempty"`
	// Record position at which to start returning results.
	Offset *int64 `json:"-" url:"offset,omitempty"`
}

// Type of the resource.
type AuditEventAuditResourceType string

const (
	AuditEventAuditResourceTypeNoneApi        AuditEventAuditResourceType = "NONE_API"
	AuditEventAuditResourceTypeAccount        AuditEventAuditResourceType = "ACCOUNT"
	AuditEventAuditResourceTypeAudit          AuditEventAuditResourceType = "AUDIT"
	AuditEventAuditResourceTypeBaseDataType   AuditEventAuditResourceType = "BASE_DATA_TYPE"
	AuditEventAuditResourceTypeFieldTemplate  AuditEventAuditResourceType = "FIELD_TEMPLATE"
	AuditEventAuditResourceTypeFile           AuditEventAuditResourceType = "FILE"
	AuditEventAuditResourceTypeKey            AuditEventAuditResourceType = "KEY"
	AuditEventAuditResourceTypePolicy         AuditEventAuditResourceType = "POLICY"
	AuditEventAuditResourceTypeProtoParse     AuditEventAuditResourceType = "PROTO_PARSE"
	AuditEventAuditResourceTypeRecord         AuditEventAuditResourceType = "RECORD"
	AuditEventAuditResourceTypeRole           AuditEventAuditResourceType = "ROLE"
	AuditEventAuditResourceTypeRule           AuditEventAuditResourceType = "RULE"
	AuditEventAuditResourceTypeSecret         AuditEventAuditResourceType = "SECRET"
	AuditEventAuditResourceTypeServiceAccount AuditEventAuditResourceType = "SERVICE_ACCOUNT"
	AuditEventAuditResourceTypeToken          AuditEventAuditResourceType = "TOKEN"
	AuditEventAuditResourceTypeUser           AuditEventAuditResourceType = "USER"
	AuditEventAuditResourceTypeVault          AuditEventAuditResourceType = "VAULT"
	AuditEventAuditResourceTypeVaultTemplate  AuditEventAuditResourceType = "VAULT_TEMPLATE"
	AuditEventAuditResourceTypeWorkspace      AuditEventAuditResourceType = "WORKSPACE"
	AuditEventAuditResourceTypeTable          AuditEventAuditResourceType = "TABLE"
	AuditEventAuditResourceTypePolicyTemplate AuditEventAuditResourceType = "POLICY_TEMPLATE"
	AuditEventAuditResourceTypeMember         AuditEventAuditResourceType = "MEMBER"
	AuditEventAuditResourceTypeTag            AuditEventAuditResourceType = "TAG"
	AuditEventAuditResourceTypeConnection     AuditEventAuditResourceType = "CONNECTION"
	AuditEventAuditResourceTypeMigration      AuditEventAuditResourceType = "MIGRATION"
	AuditEventAuditResourceTypeScheduledJob   AuditEventAuditResourceType = "SCHEDULED_JOB"
	AuditEventAuditResourceTypeJob            AuditEventAuditResourceType = "JOB"
	AuditEventAuditResourceTypeColumnName     AuditEventAuditResourceType = "COLUMN_NAME"
	AuditEventAuditResourceTypeNetworkToken   AuditEventAuditResourceType = "NETWORK_TOKEN"
	AuditEventAuditResourceTypeSubscription   AuditEventAuditResourceType = "SUBSCRIPTION"
)

func NewAuditEventAuditResourceTypeFromString(s string) (AuditEventAuditResourceType, error) {
	switch s {
	case "NONE_API":
		return AuditEventAuditResourceTypeNoneApi, nil
	case "ACCOUNT":
		return AuditEventAuditResourceTypeAccount, nil
	case "AUDIT":
		return AuditEventAuditResourceTypeAudit, nil
	case "BASE_DATA_TYPE":
		return AuditEventAuditResourceTypeBaseDataType, nil
	case "FIELD_TEMPLATE":
		return AuditEventAuditResourceTypeFieldTemplate, nil
	case "FILE":
		return AuditEventAuditResourceTypeFile, nil
	case "KEY":
		return AuditEventAuditResourceTypeKey, nil
	case "POLICY":
		return AuditEventAuditResourceTypePolicy, nil
	case "PROTO_PARSE":
		return AuditEventAuditResourceTypeProtoParse, nil
	case "RECORD":
		return AuditEventAuditResourceTypeRecord, nil
	case "ROLE":
		return AuditEventAuditResourceTypeRole, nil
	case "RULE":
		return AuditEventAuditResourceTypeRule, nil
	case "SECRET":
		return AuditEventAuditResourceTypeSecret, nil
	case "SERVICE_ACCOUNT":
		return AuditEventAuditResourceTypeServiceAccount, nil
	case "TOKEN":
		return AuditEventAuditResourceTypeToken, nil
	case "USER":
		return AuditEventAuditResourceTypeUser, nil
	case "VAULT":
		return AuditEventAuditResourceTypeVault, nil
	case "VAULT_TEMPLATE":
		return AuditEventAuditResourceTypeVaultTemplate, nil
	case "WORKSPACE":
		return AuditEventAuditResourceTypeWorkspace, nil
	case "TABLE":
		return AuditEventAuditResourceTypeTable, nil
	case "POLICY_TEMPLATE":
		return AuditEventAuditResourceTypePolicyTemplate, nil
	case "MEMBER":
		return AuditEventAuditResourceTypeMember, nil
	case "TAG":
		return AuditEventAuditResourceTypeTag, nil
	case "CONNECTION":
		return AuditEventAuditResourceTypeConnection, nil
	case "MIGRATION":
		return AuditEventAuditResourceTypeMigration, nil
	case "SCHEDULED_JOB":
		return AuditEventAuditResourceTypeScheduledJob, nil
	case "JOB":
		return AuditEventAuditResourceTypeJob, nil
	case "COLUMN_NAME":
		return AuditEventAuditResourceTypeColumnName, nil
	case "NETWORK_TOKEN":
		return AuditEventAuditResourceTypeNetworkToken, nil
	case "SUBSCRIPTION":
		return AuditEventAuditResourceTypeSubscription, nil
	}
	var t AuditEventAuditResourceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AuditEventAuditResourceType) Ptr() *AuditEventAuditResourceType {
	return &a
}

// Context for an audit event.
type AuditEventContext struct {
	// ID for the audit event.
	ChangeId *string `json:"changeID,omitempty" url:"changeID,omitempty"`
	// ID for the request that caused the event.
	RequestId *string `json:"requestID,omitempty" url:"requestID,omitempty"`
	// ID for the request set by the service that received the request.
	TraceId *string `json:"traceID,omitempty" url:"traceID,omitempty"`
	// ID for the session in which the request was sent.
	SessionId *string `json:"sessionID,omitempty" url:"sessionID,omitempty"`
	// Member who sent the request. Depending on `actorType`, this may be a user ID or a service account ID.
	Actor      *string            `json:"actor,omitempty" url:"actor,omitempty"`
	ActorType  *V1MemberType      `json:"actorType,omitempty" url:"actorType,omitempty"`
	AccessType *ContextAccessType `json:"accessType,omitempty" url:"accessType,omitempty"`
	// IP Address of the client that made the request.
	IpAddress *string `json:"ipAddress,omitempty" url:"ipAddress,omitempty"`
	// HTTP Origin request header (including scheme, hostname, and port) of the request.
	Origin   *string          `json:"origin,omitempty" url:"origin,omitempty"`
	AuthMode *ContextAuthMode `json:"authMode,omitempty" url:"authMode,omitempty"`
	// ID of the JWT token.
	JwtId *string `json:"jwtID,omitempty" url:"jwtID,omitempty"`
	// Embedded User Context.
	BearerTokenContextId *string `json:"bearerTokenContextID,omitempty" url:"bearerTokenContextID,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuditEventContext) GetChangeId() *string {
	if a == nil {
		return nil
	}
	return a.ChangeId
}

func (a *AuditEventContext) GetRequestId() *string {
	if a == nil {
		return nil
	}
	return a.RequestId
}

func (a *AuditEventContext) GetTraceId() *string {
	if a == nil {
		return nil
	}
	return a.TraceId
}

func (a *AuditEventContext) GetSessionId() *string {
	if a == nil {
		return nil
	}
	return a.SessionId
}

func (a *AuditEventContext) GetActor() *string {
	if a == nil {
		return nil
	}
	return a.Actor
}

func (a *AuditEventContext) GetActorType() *V1MemberType {
	if a == nil {
		return nil
	}
	return a.ActorType
}

func (a *AuditEventContext) GetAccessType() *ContextAccessType {
	if a == nil {
		return nil
	}
	return a.AccessType
}

func (a *AuditEventContext) GetIpAddress() *string {
	if a == nil {
		return nil
	}
	return a.IpAddress
}

func (a *AuditEventContext) GetOrigin() *string {
	if a == nil {
		return nil
	}
	return a.Origin
}

func (a *AuditEventContext) GetAuthMode() *ContextAuthMode {
	if a == nil {
		return nil
	}
	return a.AuthMode
}

func (a *AuditEventContext) GetJwtId() *string {
	if a == nil {
		return nil
	}
	return a.JwtId
}

func (a *AuditEventContext) GetBearerTokenContextId() *string {
	if a == nil {
		return nil
	}
	return a.BearerTokenContextId
}

func (a *AuditEventContext) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuditEventContext) UnmarshalJSON(data []byte) error {
	type unmarshaler AuditEventContext
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuditEventContext(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuditEventContext) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Any Sensitive data that needs to be wrapped.
type AuditEventData struct {
	// The entire body of the data requested or the query fired.
	Content *string `json:"content,omitempty" url:"content,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuditEventData) GetContent() *string {
	if a == nil {
		return nil
	}
	return a.Content
}

func (a *AuditEventData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuditEventData) UnmarshalJSON(data []byte) error {
	type unmarshaler AuditEventData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuditEventData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuditEventData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuditEventHttpInfo struct {
	// The http URI that is used.
	Uri *string `json:"URI,omitempty" url:"URI,omitempty"`
	// http method used.
	Method *string `json:"method,omitempty" url:"method,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuditEventHttpInfo) GetUri() *string {
	if a == nil {
		return nil
	}
	return a.Uri
}

func (a *AuditEventHttpInfo) GetMethod() *string {
	if a == nil {
		return nil
	}
	return a.Method
}

func (a *AuditEventHttpInfo) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuditEventHttpInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler AuditEventHttpInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuditEventHttpInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuditEventHttpInfo) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Type of access for the request.
type ContextAccessType string

const (
	ContextAccessTypeAccessNone ContextAccessType = "ACCESS_NONE"
	ContextAccessTypeApi        ContextAccessType = "API"
	ContextAccessTypeSql        ContextAccessType = "SQL"
)

func NewContextAccessTypeFromString(s string) (ContextAccessType, error) {
	switch s {
	case "ACCESS_NONE":
		return ContextAccessTypeAccessNone, nil
	case "API":
		return ContextAccessTypeApi, nil
	case "SQL":
		return ContextAccessTypeSql, nil
	}
	var t ContextAccessType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ContextAccessType) Ptr() *ContextAccessType {
	return &c
}

// Authentication mode the `actor` used.
type ContextAuthMode string

const (
	ContextAuthModeAuthNone          ContextAuthMode = "AUTH_NONE"
	ContextAuthModeOktaJwt           ContextAuthMode = "OKTA_JWT"
	ContextAuthModeServiceAccountJwt ContextAuthMode = "SERVICE_ACCOUNT_JWT"
	ContextAuthModePatJwt            ContextAuthMode = "PAT_JWT"
)

func NewContextAuthModeFromString(s string) (ContextAuthMode, error) {
	switch s {
	case "AUTH_NONE":
		return ContextAuthModeAuthNone, nil
	case "OKTA_JWT":
		return ContextAuthModeOktaJwt, nil
	case "SERVICE_ACCOUNT_JWT":
		return ContextAuthModeServiceAccountJwt, nil
	case "PAT_JWT":
		return ContextAuthModePatJwt, nil
	}
	var t ContextAuthMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ContextAuthMode) Ptr() *ContextAuthMode {
	return &c
}

type RequestActionType string

const (
	RequestActionTypeNone                  RequestActionType = "NONE"
	RequestActionTypeAssign                RequestActionType = "ASSIGN"
	RequestActionTypeCreate                RequestActionType = "CREATE"
	RequestActionTypeDelete                RequestActionType = "DELETE"
	RequestActionTypeExecute               RequestActionType = "EXECUTE"
	RequestActionTypeList                  RequestActionType = "LIST"
	RequestActionTypeRead                  RequestActionType = "READ"
	RequestActionTypeUnassign              RequestActionType = "UNASSIGN"
	RequestActionTypeUpdate                RequestActionType = "UPDATE"
	RequestActionTypeValidate              RequestActionType = "VALIDATE"
	RequestActionTypeLogin                 RequestActionType = "LOGIN"
	RequestActionTypeRotate                RequestActionType = "ROTATE"
	RequestActionTypeSchedulerotation      RequestActionType = "SCHEDULEROTATION"
	RequestActionTypeSchedulerotationalert RequestActionType = "SCHEDULEROTATIONALERT"
	RequestActionTypeImport                RequestActionType = "IMPORT"
	RequestActionTypeGetimportparameters   RequestActionType = "GETIMPORTPARAMETERS"
	RequestActionTypePing                  RequestActionType = "PING"
	RequestActionTypeGetcloudprovider      RequestActionType = "GETCLOUDPROVIDER"
)

func NewRequestActionTypeFromString(s string) (RequestActionType, error) {
	switch s {
	case "NONE":
		return RequestActionTypeNone, nil
	case "ASSIGN":
		return RequestActionTypeAssign, nil
	case "CREATE":
		return RequestActionTypeCreate, nil
	case "DELETE":
		return RequestActionTypeDelete, nil
	case "EXECUTE":
		return RequestActionTypeExecute, nil
	case "LIST":
		return RequestActionTypeList, nil
	case "READ":
		return RequestActionTypeRead, nil
	case "UNASSIGN":
		return RequestActionTypeUnassign, nil
	case "UPDATE":
		return RequestActionTypeUpdate, nil
	case "VALIDATE":
		return RequestActionTypeValidate, nil
	case "LOGIN":
		return RequestActionTypeLogin, nil
	case "ROTATE":
		return RequestActionTypeRotate, nil
	case "SCHEDULEROTATION":
		return RequestActionTypeSchedulerotation, nil
	case "SCHEDULEROTATIONALERT":
		return RequestActionTypeSchedulerotationalert, nil
	case "IMPORT":
		return RequestActionTypeImport, nil
	case "GETIMPORTPARAMETERS":
		return RequestActionTypeGetimportparameters, nil
	case "PING":
		return RequestActionTypePing, nil
	case "GETCLOUDPROVIDER":
		return RequestActionTypeGetcloudprovider, nil
	}
	var t RequestActionType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestActionType) Ptr() *RequestActionType {
	return &r
}

type V1AuditAfterOptions struct {
	// Timestamp provided in the previous audit response's `nextOps` attribute. An alternate way to manage response pagination. Can't be used with `sortOps` or `offset`. For the first request in a series of audit requests, leave blank.
	Timestamp *string `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Change ID provided in the previous audit response's `nextOps` attribute. An alternate way to manage response pagination. Can't be used with `sortOps` or `offset`. For the first request in a series of audit requests, leave blank.
	ChangeId *string `json:"changeID,omitempty" url:"changeID,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1AuditAfterOptions) GetTimestamp() *string {
	if v == nil {
		return nil
	}
	return v.Timestamp
}

func (v *V1AuditAfterOptions) GetChangeId() *string {
	if v == nil {
		return nil
	}
	return v.ChangeId
}

func (v *V1AuditAfterOptions) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1AuditAfterOptions) UnmarshalJSON(data []byte) error {
	type unmarshaler V1AuditAfterOptions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1AuditAfterOptions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1AuditAfterOptions) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Contains fields for defining Response Properties.
type V1AuditEventResponse struct {
	// The status of the overall operation.
	Code *int `json:"code,omitempty" url:"code,omitempty"`
	// The status message for the overall operation.
	Message *string         `json:"message,omitempty" url:"message,omitempty"`
	Data    *AuditEventData `json:"data,omitempty" url:"data,omitempty"`
	// time when this response is generated,  use extention method to set it.
	Timestamp *string `json:"timestamp,omitempty" url:"timestamp,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1AuditEventResponse) GetCode() *int {
	if v == nil {
		return nil
	}
	return v.Code
}

func (v *V1AuditEventResponse) GetMessage() *string {
	if v == nil {
		return nil
	}
	return v.Message
}

func (v *V1AuditEventResponse) GetData() *AuditEventData {
	if v == nil {
		return nil
	}
	return v.Data
}

func (v *V1AuditEventResponse) GetTimestamp() *string {
	if v == nil {
		return nil
	}
	return v.Timestamp
}

func (v *V1AuditEventResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1AuditEventResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler V1AuditEventResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1AuditEventResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1AuditEventResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type V1AuditResponse struct {
	// Events matching the query.
	Event   []*V1AuditResponseEvent `json:"event,omitempty" url:"event,omitempty"`
	NextOps *V1AuditAfterOptions    `json:"nextOps,omitempty" url:"nextOps,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1AuditResponse) GetEvent() []*V1AuditResponseEvent {
	if v == nil {
		return nil
	}
	return v.Event
}

func (v *V1AuditResponse) GetNextOps() *V1AuditAfterOptions {
	if v == nil {
		return nil
	}
	return v.NextOps
}

func (v *V1AuditResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1AuditResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler V1AuditResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1AuditResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1AuditResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Audit event details.
type V1AuditResponseEvent struct {
	Context  *AuditEventContext           `json:"context,omitempty" url:"context,omitempty"`
	Request  *V1AuditResponseEventRequest `json:"request,omitempty" url:"request,omitempty"`
	Response *V1AuditEventResponse        `json:"response,omitempty" url:"response,omitempty"`
	// Parent account ID of the account that made the request, if any.
	ParentAccountId *string `json:"parentAccountID,omitempty" url:"parentAccountID,omitempty"`
	// ID of the account that made the request.
	AccountId *string `json:"accountID,omitempty" url:"accountID,omitempty"`
	// IDs for resources involved in the event. Presented in `{resourceType}/{resourceID}` format. For example, `VAULT/cd1d815aa09b4cbfbb803bd20349f202`.
	ResourceIDs []string `json:"resourceIDs,omitempty" url:"resourceIDs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1AuditResponseEvent) GetContext() *AuditEventContext {
	if v == nil {
		return nil
	}
	return v.Context
}

func (v *V1AuditResponseEvent) GetRequest() *V1AuditResponseEventRequest {
	if v == nil {
		return nil
	}
	return v.Request
}

func (v *V1AuditResponseEvent) GetResponse() *V1AuditEventResponse {
	if v == nil {
		return nil
	}
	return v.Response
}

func (v *V1AuditResponseEvent) GetParentAccountId() *string {
	if v == nil {
		return nil
	}
	return v.ParentAccountId
}

func (v *V1AuditResponseEvent) GetAccountId() *string {
	if v == nil {
		return nil
	}
	return v.AccountId
}

func (v *V1AuditResponseEvent) GetResourceIDs() []string {
	if v == nil {
		return nil
	}
	return v.ResourceIDs
}

func (v *V1AuditResponseEvent) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1AuditResponseEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler V1AuditResponseEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1AuditResponseEvent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1AuditResponseEvent) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Contains fields for defining Request Properties.
type V1AuditResponseEventRequest struct {
	Data *AuditEventData `json:"data,omitempty" url:"data,omitempty"`
	// API name.
	ApiName *string `json:"apiName,omitempty" url:"apiName,omitempty"`
	// The workspaceID (if any) of the request.
	WorkspaceId *string `json:"workspaceID,omitempty" url:"workspaceID,omitempty"`
	// The vaultID (if any) of the request.
	VaultId *string `json:"vaultID,omitempty" url:"vaultID,omitempty"`
	// Tags associated with the event. To provide better search capabilities. Like login.
	Tags []string `json:"tags,omitempty" url:"tags,omitempty"`
	// time when this request is generated, use extention method to set it.
	Timestamp    *string                      `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	ActionType   *RequestActionType           `json:"actionType,omitempty" url:"actionType,omitempty"`
	ResourceType *AuditEventAuditResourceType `json:"resourceType,omitempty" url:"resourceType,omitempty"`
	HttpInfo     *AuditEventHttpInfo          `json:"httpInfo,omitempty" url:"httpInfo,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1AuditResponseEventRequest) GetData() *AuditEventData {
	if v == nil {
		return nil
	}
	return v.Data
}

func (v *V1AuditResponseEventRequest) GetApiName() *string {
	if v == nil {
		return nil
	}
	return v.ApiName
}

func (v *V1AuditResponseEventRequest) GetWorkspaceId() *string {
	if v == nil {
		return nil
	}
	return v.WorkspaceId
}

func (v *V1AuditResponseEventRequest) GetVaultId() *string {
	if v == nil {
		return nil
	}
	return v.VaultId
}

func (v *V1AuditResponseEventRequest) GetTags() []string {
	if v == nil {
		return nil
	}
	return v.Tags
}

func (v *V1AuditResponseEventRequest) GetTimestamp() *string {
	if v == nil {
		return nil
	}
	return v.Timestamp
}

func (v *V1AuditResponseEventRequest) GetActionType() *RequestActionType {
	if v == nil {
		return nil
	}
	return v.ActionType
}

func (v *V1AuditResponseEventRequest) GetResourceType() *AuditEventAuditResourceType {
	if v == nil {
		return nil
	}
	return v.ResourceType
}

func (v *V1AuditResponseEventRequest) GetHttpInfo() *AuditEventHttpInfo {
	if v == nil {
		return nil
	}
	return v.HttpInfo
}

func (v *V1AuditResponseEventRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1AuditResponseEventRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler V1AuditResponseEventRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1AuditResponseEventRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1AuditResponseEventRequest) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Type of the member.
type V1MemberType string

const (
	V1MemberTypeNone           V1MemberType = "NONE"
	V1MemberTypeUser           V1MemberType = "USER"
	V1MemberTypeServiceAccount V1MemberType = "SERVICE_ACCOUNT"
)

func NewV1MemberTypeFromString(s string) (V1MemberType, error) {
	switch s {
	case "NONE":
		return V1MemberTypeNone, nil
	case "USER":
		return V1MemberTypeUser, nil
	case "SERVICE_ACCOUNT":
		return V1MemberTypeServiceAccount, nil
	}
	var t V1MemberType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v V1MemberType) Ptr() *V1MemberType {
	return &v
}

type AuditServiceListAuditEventsRequestFilterOpsActionType string

const (
	AuditServiceListAuditEventsRequestFilterOpsActionTypeNone                  AuditServiceListAuditEventsRequestFilterOpsActionType = "NONE"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeAssign                AuditServiceListAuditEventsRequestFilterOpsActionType = "ASSIGN"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeCreate                AuditServiceListAuditEventsRequestFilterOpsActionType = "CREATE"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeDelete                AuditServiceListAuditEventsRequestFilterOpsActionType = "DELETE"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeExecute               AuditServiceListAuditEventsRequestFilterOpsActionType = "EXECUTE"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeList                  AuditServiceListAuditEventsRequestFilterOpsActionType = "LIST"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeRead                  AuditServiceListAuditEventsRequestFilterOpsActionType = "READ"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeUnassign              AuditServiceListAuditEventsRequestFilterOpsActionType = "UNASSIGN"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeUpdate                AuditServiceListAuditEventsRequestFilterOpsActionType = "UPDATE"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeValidate              AuditServiceListAuditEventsRequestFilterOpsActionType = "VALIDATE"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeLogin                 AuditServiceListAuditEventsRequestFilterOpsActionType = "LOGIN"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeRotate                AuditServiceListAuditEventsRequestFilterOpsActionType = "ROTATE"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeSchedulerotation      AuditServiceListAuditEventsRequestFilterOpsActionType = "SCHEDULEROTATION"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeSchedulerotationalert AuditServiceListAuditEventsRequestFilterOpsActionType = "SCHEDULEROTATIONALERT"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeImport                AuditServiceListAuditEventsRequestFilterOpsActionType = "IMPORT"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeGetimportparameters   AuditServiceListAuditEventsRequestFilterOpsActionType = "GETIMPORTPARAMETERS"
	AuditServiceListAuditEventsRequestFilterOpsActionTypePing                  AuditServiceListAuditEventsRequestFilterOpsActionType = "PING"
	AuditServiceListAuditEventsRequestFilterOpsActionTypeGetcloudprovider      AuditServiceListAuditEventsRequestFilterOpsActionType = "GETCLOUDPROVIDER"
)

func NewAuditServiceListAuditEventsRequestFilterOpsActionTypeFromString(s string) (AuditServiceListAuditEventsRequestFilterOpsActionType, error) {
	switch s {
	case "NONE":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeNone, nil
	case "ASSIGN":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeAssign, nil
	case "CREATE":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeCreate, nil
	case "DELETE":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeDelete, nil
	case "EXECUTE":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeExecute, nil
	case "LIST":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeList, nil
	case "READ":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeRead, nil
	case "UNASSIGN":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeUnassign, nil
	case "UPDATE":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeUpdate, nil
	case "VALIDATE":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeValidate, nil
	case "LOGIN":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeLogin, nil
	case "ROTATE":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeRotate, nil
	case "SCHEDULEROTATION":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeSchedulerotation, nil
	case "SCHEDULEROTATIONALERT":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeSchedulerotationalert, nil
	case "IMPORT":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeImport, nil
	case "GETIMPORTPARAMETERS":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeGetimportparameters, nil
	case "PING":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypePing, nil
	case "GETCLOUDPROVIDER":
		return AuditServiceListAuditEventsRequestFilterOpsActionTypeGetcloudprovider, nil
	}
	var t AuditServiceListAuditEventsRequestFilterOpsActionType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AuditServiceListAuditEventsRequestFilterOpsActionType) Ptr() *AuditServiceListAuditEventsRequestFilterOpsActionType {
	return &a
}

type AuditServiceListAuditEventsRequestFilterOpsContextAccessType string

const (
	AuditServiceListAuditEventsRequestFilterOpsContextAccessTypeAccessNone AuditServiceListAuditEventsRequestFilterOpsContextAccessType = "ACCESS_NONE"
	AuditServiceListAuditEventsRequestFilterOpsContextAccessTypeApi        AuditServiceListAuditEventsRequestFilterOpsContextAccessType = "API"
	AuditServiceListAuditEventsRequestFilterOpsContextAccessTypeSql        AuditServiceListAuditEventsRequestFilterOpsContextAccessType = "SQL"
	AuditServiceListAuditEventsRequestFilterOpsContextAccessTypeOktaLogin  AuditServiceListAuditEventsRequestFilterOpsContextAccessType = "OKTA_LOGIN"
)

func NewAuditServiceListAuditEventsRequestFilterOpsContextAccessTypeFromString(s string) (AuditServiceListAuditEventsRequestFilterOpsContextAccessType, error) {
	switch s {
	case "ACCESS_NONE":
		return AuditServiceListAuditEventsRequestFilterOpsContextAccessTypeAccessNone, nil
	case "API":
		return AuditServiceListAuditEventsRequestFilterOpsContextAccessTypeApi, nil
	case "SQL":
		return AuditServiceListAuditEventsRequestFilterOpsContextAccessTypeSql, nil
	case "OKTA_LOGIN":
		return AuditServiceListAuditEventsRequestFilterOpsContextAccessTypeOktaLogin, nil
	}
	var t AuditServiceListAuditEventsRequestFilterOpsContextAccessType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AuditServiceListAuditEventsRequestFilterOpsContextAccessType) Ptr() *AuditServiceListAuditEventsRequestFilterOpsContextAccessType {
	return &a
}

type AuditServiceListAuditEventsRequestFilterOpsContextActorType string

const (
	AuditServiceListAuditEventsRequestFilterOpsContextActorTypeNone           AuditServiceListAuditEventsRequestFilterOpsContextActorType = "NONE"
	AuditServiceListAuditEventsRequestFilterOpsContextActorTypeUser           AuditServiceListAuditEventsRequestFilterOpsContextActorType = "USER"
	AuditServiceListAuditEventsRequestFilterOpsContextActorTypeServiceAccount AuditServiceListAuditEventsRequestFilterOpsContextActorType = "SERVICE_ACCOUNT"
)

func NewAuditServiceListAuditEventsRequestFilterOpsContextActorTypeFromString(s string) (AuditServiceListAuditEventsRequestFilterOpsContextActorType, error) {
	switch s {
	case "NONE":
		return AuditServiceListAuditEventsRequestFilterOpsContextActorTypeNone, nil
	case "USER":
		return AuditServiceListAuditEventsRequestFilterOpsContextActorTypeUser, nil
	case "SERVICE_ACCOUNT":
		return AuditServiceListAuditEventsRequestFilterOpsContextActorTypeServiceAccount, nil
	}
	var t AuditServiceListAuditEventsRequestFilterOpsContextActorType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AuditServiceListAuditEventsRequestFilterOpsContextActorType) Ptr() *AuditServiceListAuditEventsRequestFilterOpsContextActorType {
	return &a
}

type AuditServiceListAuditEventsRequestFilterOpsContextAuthMode string

const (
	AuditServiceListAuditEventsRequestFilterOpsContextAuthModeAuthNone          AuditServiceListAuditEventsRequestFilterOpsContextAuthMode = "AUTH_NONE"
	AuditServiceListAuditEventsRequestFilterOpsContextAuthModeOktaJwt           AuditServiceListAuditEventsRequestFilterOpsContextAuthMode = "OKTA_JWT"
	AuditServiceListAuditEventsRequestFilterOpsContextAuthModeServiceAccountJwt AuditServiceListAuditEventsRequestFilterOpsContextAuthMode = "SERVICE_ACCOUNT_JWT"
	AuditServiceListAuditEventsRequestFilterOpsContextAuthModePatJwt            AuditServiceListAuditEventsRequestFilterOpsContextAuthMode = "PAT_JWT"
)

func NewAuditServiceListAuditEventsRequestFilterOpsContextAuthModeFromString(s string) (AuditServiceListAuditEventsRequestFilterOpsContextAuthMode, error) {
	switch s {
	case "AUTH_NONE":
		return AuditServiceListAuditEventsRequestFilterOpsContextAuthModeAuthNone, nil
	case "OKTA_JWT":
		return AuditServiceListAuditEventsRequestFilterOpsContextAuthModeOktaJwt, nil
	case "SERVICE_ACCOUNT_JWT":
		return AuditServiceListAuditEventsRequestFilterOpsContextAuthModeServiceAccountJwt, nil
	case "PAT_JWT":
		return AuditServiceListAuditEventsRequestFilterOpsContextAuthModePatJwt, nil
	}
	var t AuditServiceListAuditEventsRequestFilterOpsContextAuthMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AuditServiceListAuditEventsRequestFilterOpsContextAuthMode) Ptr() *AuditServiceListAuditEventsRequestFilterOpsContextAuthMode {
	return &a
}

type AuditServiceListAuditEventsRequestFilterOpsResourceType string

const (
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeNoneApi        AuditServiceListAuditEventsRequestFilterOpsResourceType = "NONE_API"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeAccount        AuditServiceListAuditEventsRequestFilterOpsResourceType = "ACCOUNT"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeAudit          AuditServiceListAuditEventsRequestFilterOpsResourceType = "AUDIT"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeBaseDataType   AuditServiceListAuditEventsRequestFilterOpsResourceType = "BASE_DATA_TYPE"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeFieldTemplate  AuditServiceListAuditEventsRequestFilterOpsResourceType = "FIELD_TEMPLATE"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeFile           AuditServiceListAuditEventsRequestFilterOpsResourceType = "FILE"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeKey            AuditServiceListAuditEventsRequestFilterOpsResourceType = "KEY"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypePolicy         AuditServiceListAuditEventsRequestFilterOpsResourceType = "POLICY"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeProtoParse     AuditServiceListAuditEventsRequestFilterOpsResourceType = "PROTO_PARSE"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeRecord         AuditServiceListAuditEventsRequestFilterOpsResourceType = "RECORD"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeRole           AuditServiceListAuditEventsRequestFilterOpsResourceType = "ROLE"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeRule           AuditServiceListAuditEventsRequestFilterOpsResourceType = "RULE"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeSecret         AuditServiceListAuditEventsRequestFilterOpsResourceType = "SECRET"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeServiceAccount AuditServiceListAuditEventsRequestFilterOpsResourceType = "SERVICE_ACCOUNT"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeToken          AuditServiceListAuditEventsRequestFilterOpsResourceType = "TOKEN"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeUser           AuditServiceListAuditEventsRequestFilterOpsResourceType = "USER"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeVault          AuditServiceListAuditEventsRequestFilterOpsResourceType = "VAULT"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeVaultTemplate  AuditServiceListAuditEventsRequestFilterOpsResourceType = "VAULT_TEMPLATE"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeWorkspace      AuditServiceListAuditEventsRequestFilterOpsResourceType = "WORKSPACE"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeTable          AuditServiceListAuditEventsRequestFilterOpsResourceType = "TABLE"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypePolicyTemplate AuditServiceListAuditEventsRequestFilterOpsResourceType = "POLICY_TEMPLATE"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeMember         AuditServiceListAuditEventsRequestFilterOpsResourceType = "MEMBER"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeTag            AuditServiceListAuditEventsRequestFilterOpsResourceType = "TAG"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeConnection     AuditServiceListAuditEventsRequestFilterOpsResourceType = "CONNECTION"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeMigration      AuditServiceListAuditEventsRequestFilterOpsResourceType = "MIGRATION"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeScheduledJob   AuditServiceListAuditEventsRequestFilterOpsResourceType = "SCHEDULED_JOB"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeJob            AuditServiceListAuditEventsRequestFilterOpsResourceType = "JOB"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeColumnName     AuditServiceListAuditEventsRequestFilterOpsResourceType = "COLUMN_NAME"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeNetworkToken   AuditServiceListAuditEventsRequestFilterOpsResourceType = "NETWORK_TOKEN"
	AuditServiceListAuditEventsRequestFilterOpsResourceTypeSubscription   AuditServiceListAuditEventsRequestFilterOpsResourceType = "SUBSCRIPTION"
)

func NewAuditServiceListAuditEventsRequestFilterOpsResourceTypeFromString(s string) (AuditServiceListAuditEventsRequestFilterOpsResourceType, error) {
	switch s {
	case "NONE_API":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeNoneApi, nil
	case "ACCOUNT":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeAccount, nil
	case "AUDIT":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeAudit, nil
	case "BASE_DATA_TYPE":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeBaseDataType, nil
	case "FIELD_TEMPLATE":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeFieldTemplate, nil
	case "FILE":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeFile, nil
	case "KEY":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeKey, nil
	case "POLICY":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypePolicy, nil
	case "PROTO_PARSE":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeProtoParse, nil
	case "RECORD":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeRecord, nil
	case "ROLE":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeRole, nil
	case "RULE":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeRule, nil
	case "SECRET":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeSecret, nil
	case "SERVICE_ACCOUNT":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeServiceAccount, nil
	case "TOKEN":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeToken, nil
	case "USER":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeUser, nil
	case "VAULT":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeVault, nil
	case "VAULT_TEMPLATE":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeVaultTemplate, nil
	case "WORKSPACE":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeWorkspace, nil
	case "TABLE":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeTable, nil
	case "POLICY_TEMPLATE":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypePolicyTemplate, nil
	case "MEMBER":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeMember, nil
	case "TAG":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeTag, nil
	case "CONNECTION":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeConnection, nil
	case "MIGRATION":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeMigration, nil
	case "SCHEDULED_JOB":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeScheduledJob, nil
	case "JOB":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeJob, nil
	case "COLUMN_NAME":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeColumnName, nil
	case "NETWORK_TOKEN":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeNetworkToken, nil
	case "SUBSCRIPTION":
		return AuditServiceListAuditEventsRequestFilterOpsResourceTypeSubscription, nil
	}
	var t AuditServiceListAuditEventsRequestFilterOpsResourceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AuditServiceListAuditEventsRequestFilterOpsResourceType) Ptr() *AuditServiceListAuditEventsRequestFilterOpsResourceType {
	return &a
}

type AuditServiceListAuditEventsRequestSortOpsOrderBy string

const (
	AuditServiceListAuditEventsRequestSortOpsOrderByAscending  AuditServiceListAuditEventsRequestSortOpsOrderBy = "ASCENDING"
	AuditServiceListAuditEventsRequestSortOpsOrderByDescending AuditServiceListAuditEventsRequestSortOpsOrderBy = "DESCENDING"
)

func NewAuditServiceListAuditEventsRequestSortOpsOrderByFromString(s string) (AuditServiceListAuditEventsRequestSortOpsOrderBy, error) {
	switch s {
	case "ASCENDING":
		return AuditServiceListAuditEventsRequestSortOpsOrderByAscending, nil
	case "DESCENDING":
		return AuditServiceListAuditEventsRequestSortOpsOrderByDescending, nil
	}
	var t AuditServiceListAuditEventsRequestSortOpsOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AuditServiceListAuditEventsRequestSortOpsOrderBy) Ptr() *AuditServiceListAuditEventsRequestSortOpsOrderBy {
	return &a
}
