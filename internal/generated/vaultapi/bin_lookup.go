// This file was auto-generated by Fern from our API Definition.

package vaultapi

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/skyflowapi/skyflow-go/v2/internal/generated/vaultapi/internal"
)

type V1BinListRequest struct {
	// Fields to return. If not specified, all fields are returned.
	Fields []string `json:"fields,omitempty" url:"-"`
	// BIN of the card.
	Bin               *string              `json:"BIN,omitempty" url:"-"`
	VaultSchemaConfig *V1VaultSchemaConfig `json:"vault_schema_config,omitempty" url:"-"`
	// <code>skyflow_id</code> of the record.
	SkyflowId *string `json:"skyflow_id,omitempty" url:"-"`
}

// Response to the Get BIN request.
type V1BinListResponse struct {
	// Card metadata associated with the specified BIN.
	CardsData []*V1Card `json:"cards_data,omitempty" url:"cards_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1BinListResponse) GetCardsData() []*V1Card {
	if v == nil {
		return nil
	}
	return v.CardsData
}

func (v *V1BinListResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1BinListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler V1BinListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1BinListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1BinListResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Card metadata of the requested BIN.
type V1Card struct {
	// BIN of the card.
	Bin *string `json:"BIN,omitempty" url:"BIN,omitempty"`
	// Name of the card issuer bank.
	IssuerName *string `json:"issuer_name,omitempty" url:"issuer_name,omitempty"`
	// Country code of the card.
	CountryCode *string `json:"country_code,omitempty" url:"country_code,omitempty"`
	// Currency of the card.
	Currency *string `json:"currency,omitempty" url:"currency,omitempty"`
	// Type of the card.
	CardType *string `json:"card_type,omitempty" url:"card_type,omitempty"`
	// Category of the card.
	CardCategory *string `json:"card_category,omitempty" url:"card_category,omitempty"`
	// Scheme of the card.
	CardScheme *string `json:"card_scheme,omitempty" url:"card_scheme,omitempty"`
	// Last four digits of the card number.
	CardLastFourDigits *string `json:"card_last_four_digits,omitempty" url:"card_last_four_digits,omitempty"`
	// Expiry date of the card.
	CardExpiry *string `json:"card_expiry,omitempty" url:"card_expiry,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1Card) GetBin() *string {
	if v == nil {
		return nil
	}
	return v.Bin
}

func (v *V1Card) GetIssuerName() *string {
	if v == nil {
		return nil
	}
	return v.IssuerName
}

func (v *V1Card) GetCountryCode() *string {
	if v == nil {
		return nil
	}
	return v.CountryCode
}

func (v *V1Card) GetCurrency() *string {
	if v == nil {
		return nil
	}
	return v.Currency
}

func (v *V1Card) GetCardType() *string {
	if v == nil {
		return nil
	}
	return v.CardType
}

func (v *V1Card) GetCardCategory() *string {
	if v == nil {
		return nil
	}
	return v.CardCategory
}

func (v *V1Card) GetCardScheme() *string {
	if v == nil {
		return nil
	}
	return v.CardScheme
}

func (v *V1Card) GetCardLastFourDigits() *string {
	if v == nil {
		return nil
	}
	return v.CardLastFourDigits
}

func (v *V1Card) GetCardExpiry() *string {
	if v == nil {
		return nil
	}
	return v.CardExpiry
}

func (v *V1Card) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1Card) UnmarshalJSON(data []byte) error {
	type unmarshaler V1Card
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1Card(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1Card) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Mapping of the fields in the vault to the fields to use for the lookup.
type V1VaultFieldMapping struct {
	// Name of the column that stores the card number.
	CardNumber *string `json:"card_number,omitempty" url:"card_number,omitempty"`
	// Name of the column that stores the card number suffix.
	CardLastFourDigits *string `json:"card_last_four_digits,omitempty" url:"card_last_four_digits,omitempty"`
	// Name of the column that stores the expiry date.
	CardExpiry *string `json:"card_expiry,omitempty" url:"card_expiry,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1VaultFieldMapping) GetCardNumber() *string {
	if v == nil {
		return nil
	}
	return v.CardNumber
}

func (v *V1VaultFieldMapping) GetCardLastFourDigits() *string {
	if v == nil {
		return nil
	}
	return v.CardLastFourDigits
}

func (v *V1VaultFieldMapping) GetCardExpiry() *string {
	if v == nil {
		return nil
	}
	return v.CardExpiry
}

func (v *V1VaultFieldMapping) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1VaultFieldMapping) UnmarshalJSON(data []byte) error {
	type unmarshaler V1VaultFieldMapping
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1VaultFieldMapping(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1VaultFieldMapping) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Details of the vault that stores additional card details.
type V1VaultSchemaConfig struct {
	// ID of the vault that stores card details.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// Name of the table that stores card details.
	TableName *string              `json:"table_name,omitempty" url:"table_name,omitempty"`
	Mapping   *V1VaultFieldMapping `json:"mapping,omitempty" url:"mapping,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1VaultSchemaConfig) GetId() *string {
	if v == nil {
		return nil
	}
	return v.Id
}

func (v *V1VaultSchemaConfig) GetTableName() *string {
	if v == nil {
		return nil
	}
	return v.TableName
}

func (v *V1VaultSchemaConfig) GetMapping() *V1VaultFieldMapping {
	if v == nil {
		return nil
	}
	return v.Mapping
}

func (v *V1VaultSchemaConfig) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1VaultSchemaConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler V1VaultSchemaConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1VaultSchemaConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1VaultSchemaConfig) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
