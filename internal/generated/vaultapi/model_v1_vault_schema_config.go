/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the V1VaultSchemaConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1VaultSchemaConfig{}

// V1VaultSchemaConfig Details of the vaultapi that stores additional card details.
type V1VaultSchemaConfig struct {
	// ID of the vaultapi that stores card details.
	Id *string `json:"id,omitempty"`
	// Name of the table that stores card details.
	TableName *string            `json:"table_name,omitempty"`
	Mapping *V1VaultFieldMapping `json:"mapping,omitempty"`
}

// NewV1VaultSchemaConfig instantiates a new V1VaultSchemaConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1VaultSchemaConfig() *V1VaultSchemaConfig {
	this := V1VaultSchemaConfig{}
	return &this
}

// NewV1VaultSchemaConfigWithDefaults instantiates a new V1VaultSchemaConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1VaultSchemaConfigWithDefaults() *V1VaultSchemaConfig {
	this := V1VaultSchemaConfig{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1VaultSchemaConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VaultSchemaConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1VaultSchemaConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1VaultSchemaConfig) SetId(v string) {
	o.Id = &v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *V1VaultSchemaConfig) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VaultSchemaConfig) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *V1VaultSchemaConfig) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *V1VaultSchemaConfig) SetTableName(v string) {
	o.TableName = &v
}

// GetMapping returns the Mapping field value if set, zero value otherwise.
func (o *V1VaultSchemaConfig) GetMapping() V1VaultFieldMapping {
	if o == nil || IsNil(o.Mapping) {
		var ret V1VaultFieldMapping
		return ret
	}
	return *o.Mapping
}

// GetMappingOk returns a tuple with the Mapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VaultSchemaConfig) GetMappingOk() (*V1VaultFieldMapping, bool) {
	if o == nil || IsNil(o.Mapping) {
		return nil, false
	}
	return o.Mapping, true
}

// HasMapping returns a boolean if a field has been set.
func (o *V1VaultSchemaConfig) HasMapping() bool {
	if o != nil && !IsNil(o.Mapping) {
		return true
	}

	return false
}

// SetMapping gets a reference to the given V1VaultFieldMapping and assigns it to the Mapping field.
func (o *V1VaultSchemaConfig) SetMapping(v V1VaultFieldMapping) {
	o.Mapping = &v
}

func (o V1VaultSchemaConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1VaultSchemaConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TableName) {
		toSerialize["table_name"] = o.TableName
	}
	if !IsNil(o.Mapping) {
		toSerialize["mapping"] = o.Mapping
	}
	return toSerialize, nil
}

type NullableV1VaultSchemaConfig struct {
	value *V1VaultSchemaConfig
	isSet bool
}

func (v NullableV1VaultSchemaConfig) Get() *V1VaultSchemaConfig {
	return v.value
}

func (v *NullableV1VaultSchemaConfig) Set(val *V1VaultSchemaConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV1VaultSchemaConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV1VaultSchemaConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1VaultSchemaConfig(val *V1VaultSchemaConfig) *NullableV1VaultSchemaConfig {
	return &NullableV1VaultSchemaConfig{value: val, isSet: true}
}

func (v NullableV1VaultSchemaConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1VaultSchemaConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


