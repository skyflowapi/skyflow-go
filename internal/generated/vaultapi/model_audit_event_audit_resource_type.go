/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
	"fmt"
)

// AuditEventAuditResourceType Type of the resource.
type AuditEventAuditResourceType string

// List of AuditEventAuditResourceType
const (
	AUDITEVENTAUDITRESOURCETYPE_NONE_API        AuditEventAuditResourceType = "NONE_API"
	AUDITEVENTAUDITRESOURCETYPE_ACCOUNT         AuditEventAuditResourceType = "ACCOUNT"
	AUDITEVENTAUDITRESOURCETYPE_AUDIT           AuditEventAuditResourceType = "AUDIT"
	AUDITEVENTAUDITRESOURCETYPE_BASE_DATA_TYPE  AuditEventAuditResourceType = "BASE_DATA_TYPE"
	AUDITEVENTAUDITRESOURCETYPE_FIELD_TEMPLATE  AuditEventAuditResourceType = "FIELD_TEMPLATE"
	AUDITEVENTAUDITRESOURCETYPE_FILE            AuditEventAuditResourceType = "FILE"
	AUDITEVENTAUDITRESOURCETYPE_KEY             AuditEventAuditResourceType = "KEY"
	AUDITEVENTAUDITRESOURCETYPE_POLICY          AuditEventAuditResourceType = "POLICY"
	AUDITEVENTAUDITRESOURCETYPE_PROTO_PARSE     AuditEventAuditResourceType = "PROTO_PARSE"
	AUDITEVENTAUDITRESOURCETYPE_RECORD          AuditEventAuditResourceType = "RECORD"
	AUDITEVENTAUDITRESOURCETYPE_ROLE            AuditEventAuditResourceType = "ROLE"
	AUDITEVENTAUDITRESOURCETYPE_RULE            AuditEventAuditResourceType = "RULE"
	AUDITEVENTAUDITRESOURCETYPE_SECRET          AuditEventAuditResourceType = "SECRET"
	AUDITEVENTAUDITRESOURCETYPE_SERVICE_ACCOUNT AuditEventAuditResourceType = "SERVICE_ACCOUNT"
	AUDITEVENTAUDITRESOURCETYPE_TOKEN           AuditEventAuditResourceType = "TOKEN"
	AUDITEVENTAUDITRESOURCETYPE_USER            AuditEventAuditResourceType = "USER"
	AUDITEVENTAUDITRESOURCETYPE_VAULT           AuditEventAuditResourceType = "VAULT"
	AUDITEVENTAUDITRESOURCETYPE_VAULT_TEMPLATE  AuditEventAuditResourceType = "VAULT_TEMPLATE"
	AUDITEVENTAUDITRESOURCETYPE_WORKSPACE       AuditEventAuditResourceType = "WORKSPACE"
	AUDITEVENTAUDITRESOURCETYPE_TABLE           AuditEventAuditResourceType = "TABLE"
	AUDITEVENTAUDITRESOURCETYPE_POLICY_TEMPLATE AuditEventAuditResourceType = "POLICY_TEMPLATE"
	AUDITEVENTAUDITRESOURCETYPE_MEMBER          AuditEventAuditResourceType = "MEMBER"
	AUDITEVENTAUDITRESOURCETYPE_TAG             AuditEventAuditResourceType = "TAG"
	AUDITEVENTAUDITRESOURCETYPE_CONNECTION      AuditEventAuditResourceType = "CONNECTION"
	AUDITEVENTAUDITRESOURCETYPE_MIGRATION       AuditEventAuditResourceType = "MIGRATION"
	AUDITEVENTAUDITRESOURCETYPE_SCHEDULED_JOB   AuditEventAuditResourceType = "SCHEDULED_JOB"
	AUDITEVENTAUDITRESOURCETYPE_JOB             AuditEventAuditResourceType = "JOB"
	AUDITEVENTAUDITRESOURCETYPE_COLUMN_NAME     AuditEventAuditResourceType = "COLUMN_NAME"
	AUDITEVENTAUDITRESOURCETYPE_NETWORK_TOKEN   AuditEventAuditResourceType = "NETWORK_TOKEN"
	AUDITEVENTAUDITRESOURCETYPE_SUBSCRIPTION    AuditEventAuditResourceType = "SUBSCRIPTION"
)

// All allowed values of AuditEventAuditResourceType enum
var AllowedAuditEventAuditResourceTypeEnumValues = []AuditEventAuditResourceType{
	"NONE_API",
	"ACCOUNT",
	"AUDIT",
	"BASE_DATA_TYPE",
	"FIELD_TEMPLATE",
	"FILE",
	"KEY",
	"POLICY",
	"PROTO_PARSE",
	"RECORD",
	"ROLE",
	"RULE",
	"SECRET",
	"SERVICE_ACCOUNT",
	"TOKEN",
	"USER",
	"VAULT",
	"VAULT_TEMPLATE",
	"WORKSPACE",
	"TABLE",
	"POLICY_TEMPLATE",
	"MEMBER",
	"TAG",
	"CONNECTION",
	"MIGRATION",
	"SCHEDULED_JOB",
	"JOB",
	"COLUMN_NAME",
	"NETWORK_TOKEN",
	"SUBSCRIPTION",
}

func (v *AuditEventAuditResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuditEventAuditResourceType(value)
	for _, existing := range AllowedAuditEventAuditResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuditEventAuditResourceType", value)
}

// NewAuditEventAuditResourceTypeFromValue returns a pointer to a valid AuditEventAuditResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuditEventAuditResourceTypeFromValue(v string) (*AuditEventAuditResourceType, error) {
	ev := AuditEventAuditResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuditEventAuditResourceType: valid values are %v", v, AllowedAuditEventAuditResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuditEventAuditResourceType) IsValid() bool {
	for _, existing := range AllowedAuditEventAuditResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuditEventAuditResourceType value
func (v AuditEventAuditResourceType) Ptr() *AuditEventAuditResourceType {
	return &v
}

type NullableAuditEventAuditResourceType struct {
	value *AuditEventAuditResourceType
	isSet bool
}

func (v NullableAuditEventAuditResourceType) Get() *AuditEventAuditResourceType {
	return v.value
}

func (v *NullableAuditEventAuditResourceType) Set(val *AuditEventAuditResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditEventAuditResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditEventAuditResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditEventAuditResourceType(val *AuditEventAuditResourceType) *NullableAuditEventAuditResourceType {
	return &NullableAuditEventAuditResourceType{value: val, isSet: true}
}

func (v NullableAuditEventAuditResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditEventAuditResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

