// Code generated by Fern. DO NOT EDIT.

package files

import (
	context "context"
	generated "github.com/skyflowapi/skyflow-go/v2/internal/generated"
	core "github.com/skyflowapi/skyflow-go/v2/internal/generated/core"
	internal "github.com/skyflowapi/skyflow-go/v2/internal/generated/internal"
	option "github.com/skyflowapi/skyflow-go/v2/internal/generated/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// De-identifies sensitive data from a file. This operation includes options applicable to all supported file types.<br/><br/>For more specific options, see the category-specific operations (like <a href='#deidentify_document'>De-identify Document</a>) and the file type-specific opertions (like <a href='#deidentify_pdf'>De-identify PDF</a>).
func (c *Client) DeidentifyFile(
	ctx context.Context,
	request *generated.DeidentifyFileRequest,
	opts ...option.RequestOption,
) (*generated.DeidentifyFileResponse, error) {
	response, err := c.WithRawResponse.DeidentifyFile(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// De-identifies sensitive data from a document file. This operation includes options applicable to all supported document file types.<br/><br/>For more specific options, see the file type-specific opertions (like <a href='#deidentify_pdf'>De-identify PDF</a>) where they're available. For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.
func (c *Client) DeidentifyDocument(
	ctx context.Context,
	request *generated.DeidentifyDocumentRequest,
	opts ...option.RequestOption,
) (*generated.DeidentifyFileResponse, error) {
	response, err := c.WithRawResponse.DeidentifyDocument(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// De-identifies sensitive data from a PDF file. This operation includes options specific to PDF files.<br/><br/>For broader file type support, see <a href='#deidentify_document'>De-identify Document</a> and <a href='#deidentify_file'>De-identify File</a>.
func (c *Client) DeidentifyPdf(
	ctx context.Context,
	request *generated.DeidentifyPdfRequest,
	opts ...option.RequestOption,
) (*generated.DeidentifyFileResponse, error) {
	response, err := c.WithRawResponse.DeidentifyPdf(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// De-identifies sensitive data from an image file. This operation includes options applicable to all supported image file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.
func (c *Client) DeidentifyImage(
	ctx context.Context,
	request *generated.DeidentifyImageRequest,
	opts ...option.RequestOption,
) (*generated.DeidentifyFileResponse, error) {
	response, err := c.WithRawResponse.DeidentifyImage(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// De-identifies sensitive data from a text file. This operation includes options applicable to all supported image text types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.
func (c *Client) DeidentifyText(
	ctx context.Context,
	request *generated.DeidentifyTextRequest,
	opts ...option.RequestOption,
) (*generated.DeidentifyFileResponse, error) {
	response, err := c.WithRawResponse.DeidentifyText(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// De-identifies sensitive data from a structured text file. This operation includes options applicable to all supported structured text file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.
func (c *Client) DeidentifyStructuredText(
	ctx context.Context,
	request *generated.DeidentifyStructuredTextRequest,
	opts ...option.RequestOption,
) (*generated.DeidentifyFileResponse, error) {
	response, err := c.WithRawResponse.DeidentifyStructuredText(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// De-identifies sensitive data from a spreadsheet file. This operation includes options applicable to all supported spreadsheet file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.
func (c *Client) DeidentifySpreadsheet(
	ctx context.Context,
	request *generated.DeidentifySpreadsheetRequest,
	opts ...option.RequestOption,
) (*generated.DeidentifyFileResponse, error) {
	response, err := c.WithRawResponse.DeidentifySpreadsheet(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// De-identifies sensitive data from a presentation file. This operation includes options applicable to all supported presentation file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.
func (c *Client) DeidentifyPresentation(
	ctx context.Context,
	request *generated.DeidentifyPresentationRequest,
	opts ...option.RequestOption,
) (*generated.DeidentifyFileResponse, error) {
	response, err := c.WithRawResponse.DeidentifyPresentation(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// De-identifies sensitive data from an audio file. This operation includes options applicable to all supported audio file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.
func (c *Client) DeidentifyAudio(
	ctx context.Context,
	request *generated.DeidentifyAudioRequest,
	opts ...option.RequestOption,
) (*generated.DeidentifyFileResponse, error) {
	response, err := c.WithRawResponse.DeidentifyAudio(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns the status of the detect run.
func (c *Client) GetRun(
	ctx context.Context,
	// ID of the detect run.
	runId generated.Uuid,
	request *generated.GetRunRequest,
	opts ...option.RequestOption,
) (*generated.DeidentifyStatusResponse, error) {
	response, err := c.WithRawResponse.GetRun(
		ctx,
		runId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Re-identifies tokens in a file.
func (c *Client) ReidentifyFile(
	ctx context.Context,
	request *generated.ReidentifyFileRequest,
	opts ...option.RequestOption,
) (*generated.ReidentifyFileResponse, error) {
	response, err := c.WithRawResponse.ReidentifyFile(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
