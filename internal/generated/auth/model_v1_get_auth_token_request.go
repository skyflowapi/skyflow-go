/*
Skyflow Management API

# Management API  This API controls aspects of your account and schema, including workspaces, vaults, keys, users, permissions, and more.  The Management API is available from two base URIs:<ul><li><b>Sandbox:</b> https://manage.skyflowapis-preview.com</li><li><b>Production:</b> https://manage.skyflowapis.com</li></ul>  When you make an API call, you need to add two headers: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><tr><td>X-SKYFLOW-ACCOUNT-ID</td><td>Your Skyflow account ID.</td><td><code>X-SKYFLOW-ACCOUNT-ID: h451b763713e4424a7jke1bbkbbc84ef</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the V1GetAuthTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GetAuthTokenRequest{}

// V1GetAuthTokenRequest struct for V1GetAuthTokenRequest
type V1GetAuthTokenRequest struct {
	// Grant type of the request. Set this to `urn:ietf:params:oauth:grant-type:jwt-bearer`.
	GrantType string `json:"grant_type"`
	// User-signed JWT token that contains the following fields: <br/> <ul><li><code>iss</code>: Issuer of the JWT.</li><li><code>key</code>: Unique identifier for the key.</li><li><code>aud</code>: Recipient the JWT is intended for.</li><li><code>exp</code>: Time the JWT expires.</li><li><code>sub</code>: Subject of the JWT.</li><li><code>ctx</code>: (Optional) Value for <a href='/context-aware-overview/'>Context-aware authorization</a>.</li></ul>
	Assertion string `json:"assertion"`
	// Subject token.
	SubjectToken *string `json:"subject_token,omitempty"`
	// Subject token type.
	SubjectTokenType *string `json:"subject_token_type,omitempty"`
	// Token use type. Either `delegation` or `impersonation`.
	RequestedTokenUse *string `json:"requested_token_use,omitempty"`
	// Subset of available <a href='#Roles'>roles</a> to associate with the requested token. Uses the format \"role:\\<roleID1\\> role:\\<roleID2\\>\".
	Scope *string `json:"scope,omitempty"`
}

type _V1GetAuthTokenRequest V1GetAuthTokenRequest

// NewV1GetAuthTokenRequest instantiates a new V1GetAuthTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GetAuthTokenRequest(grantType string, assertion string) *V1GetAuthTokenRequest {
	this := V1GetAuthTokenRequest{}
	this.GrantType = grantType
	this.Assertion = assertion
	return &this
}

// NewV1GetAuthTokenRequestWithDefaults instantiates a new V1GetAuthTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GetAuthTokenRequestWithDefaults() *V1GetAuthTokenRequest {
	this := V1GetAuthTokenRequest{}
	return &this
}

// GetGrantType returns the GrantType field value
func (o *V1GetAuthTokenRequest) GetGrantType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrantType
}

// GetGrantTypeOk returns a tuple with the GrantType field value
// and a boolean to check if the value has been set.
func (o *V1GetAuthTokenRequest) GetGrantTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrantType, true
}

// SetGrantType sets field value
func (o *V1GetAuthTokenRequest) SetGrantType(v string) {
	o.GrantType = v
}

// GetAssertion returns the Assertion field value
func (o *V1GetAuthTokenRequest) GetAssertion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Assertion
}

// GetAssertionOk returns a tuple with the Assertion field value
// and a boolean to check if the value has been set.
func (o *V1GetAuthTokenRequest) GetAssertionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assertion, true
}

// SetAssertion sets field value
func (o *V1GetAuthTokenRequest) SetAssertion(v string) {
	o.Assertion = v
}

// GetSubjectToken returns the SubjectToken field value if set, zero value otherwise.
func (o *V1GetAuthTokenRequest) GetSubjectToken() string {
	if o == nil || IsNil(o.SubjectToken) {
		var ret string
		return ret
	}
	return *o.SubjectToken
}

// GetSubjectTokenOk returns a tuple with the SubjectToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GetAuthTokenRequest) GetSubjectTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectToken) {
		return nil, false
	}
	return o.SubjectToken, true
}

// HasSubjectToken returns a boolean if a field has been set.
func (o *V1GetAuthTokenRequest) HasSubjectToken() bool {
	if o != nil && !IsNil(o.SubjectToken) {
		return true
	}

	return false
}

// SetSubjectToken gets a reference to the given string and assigns it to the SubjectToken field.
func (o *V1GetAuthTokenRequest) SetSubjectToken(v string) {
	o.SubjectToken = &v
}

// GetSubjectTokenType returns the SubjectTokenType field value if set, zero value otherwise.
func (o *V1GetAuthTokenRequest) GetSubjectTokenType() string {
	if o == nil || IsNil(o.SubjectTokenType) {
		var ret string
		return ret
	}
	return *o.SubjectTokenType
}

// GetSubjectTokenTypeOk returns a tuple with the SubjectTokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GetAuthTokenRequest) GetSubjectTokenTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectTokenType) {
		return nil, false
	}
	return o.SubjectTokenType, true
}

// HasSubjectTokenType returns a boolean if a field has been set.
func (o *V1GetAuthTokenRequest) HasSubjectTokenType() bool {
	if o != nil && !IsNil(o.SubjectTokenType) {
		return true
	}

	return false
}

// SetSubjectTokenType gets a reference to the given string and assigns it to the SubjectTokenType field.
func (o *V1GetAuthTokenRequest) SetSubjectTokenType(v string) {
	o.SubjectTokenType = &v
}

// GetRequestedTokenUse returns the RequestedTokenUse field value if set, zero value otherwise.
func (o *V1GetAuthTokenRequest) GetRequestedTokenUse() string {
	if o == nil || IsNil(o.RequestedTokenUse) {
		var ret string
		return ret
	}
	return *o.RequestedTokenUse
}

// GetRequestedTokenUseOk returns a tuple with the RequestedTokenUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GetAuthTokenRequest) GetRequestedTokenUseOk() (*string, bool) {
	if o == nil || IsNil(o.RequestedTokenUse) {
		return nil, false
	}
	return o.RequestedTokenUse, true
}

// HasRequestedTokenUse returns a boolean if a field has been set.
func (o *V1GetAuthTokenRequest) HasRequestedTokenUse() bool {
	if o != nil && !IsNil(o.RequestedTokenUse) {
		return true
	}

	return false
}

// SetRequestedTokenUse gets a reference to the given string and assigns it to the RequestedTokenUse field.
func (o *V1GetAuthTokenRequest) SetRequestedTokenUse(v string) {
	o.RequestedTokenUse = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *V1GetAuthTokenRequest) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GetAuthTokenRequest) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *V1GetAuthTokenRequest) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *V1GetAuthTokenRequest) SetScope(v string) {
	o.Scope = &v
}

func (o V1GetAuthTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GetAuthTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["grant_type"] = o.GrantType
	toSerialize["assertion"] = o.Assertion
	if !IsNil(o.SubjectToken) {
		toSerialize["subject_token"] = o.SubjectToken
	}
	if !IsNil(o.SubjectTokenType) {
		toSerialize["subject_token_type"] = o.SubjectTokenType
	}
	if !IsNil(o.RequestedTokenUse) {
		toSerialize["requested_token_use"] = o.RequestedTokenUse
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

func (o *V1GetAuthTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"grant_type",
		"assertion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1GetAuthTokenRequest := _V1GetAuthTokenRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1GetAuthTokenRequest)

	if err != nil {
		return err
	}

	*o = V1GetAuthTokenRequest(varV1GetAuthTokenRequest)

	return err
}

type NullableV1GetAuthTokenRequest struct {
	value *V1GetAuthTokenRequest
	isSet bool
}

func (v NullableV1GetAuthTokenRequest) Get() *V1GetAuthTokenRequest {
	return v.value
}

func (v *NullableV1GetAuthTokenRequest) Set(val *V1GetAuthTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GetAuthTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GetAuthTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GetAuthTokenRequest(val *V1GetAuthTokenRequest) *NullableV1GetAuthTokenRequest {
	return &NullableV1GetAuthTokenRequest{value: val, isSet: true}
}

func (v NullableV1GetAuthTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GetAuthTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


