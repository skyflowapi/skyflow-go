name: GoSec Scan

# Run workflow each time code is pushed to your repository.
on:
  pull_request:
    branches:
      - main

permissions:
  issues: write  # Grant permission to write comments on issues and PRs
  pull-requests: write  # Grant permission to write comments on PRs

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Extract Go version from go.mod
      id: go_version
      run: |
        # Check if go.mod exists before trying to extract the Go version
        if [ -f go.mod ]; then
          # Extract the Go version in the format "go 1.23.1" or "go 1.23"
          VERSION=$(grep -oP '^go \K[0-9]+\.[0-9]+\.[0-9]+' go.mod || grep -oP '^go \K[0-9]+\.[0-9]+' go.mod)
          
          if [ -z "$VERSION" ]; then
            echo "Error: Go version not found in go.mod file"
            exit 1
          fi
          
          echo "GO_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Go version extracted: $VERSION"
        else
          echo "Error: go.mod file not found in the repository."
          exit 1
        fi

    - name: Set up Go with the extracted version
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}  # Using the version extracted from go.mod

    - name: Security Scan
      uses: securego/gosec@master
      with:
        args: '-severity=high -confidence=high -no-fail -fmt json -out results.json ./...'

    - name: Display Raw GoSec JSON Output
      run: |
        echo "Displaying raw GoSec results..."
        cat results.json

    - name: Inspect the Structure of JSON
      run: |
        # Let's display the 'Issues' array to understand its structure
        echo "Inspecting the Issues structure..."
        jq '.Issues' results.json
        
    - name: Add comment on PR if findings are found
      uses: actions/github-script@v6
      with:
          script: |
            // Ensure the context has a pull_request
            if (context.payload.pull_request) {
              const prNumber = context.payload.pull_request.number;
              const fs = require('fs');
              const results = JSON.parse(fs.readFileSync('results.json', 'utf8'));
              const highFindings = results.Issues.filter(issue => issue.severity === 'HIGH' || issue.severity === 'MEDIUM');

              // Comment if high-severity findings are found
              if (highFindings.length > 0) {
                const comment = `**GoSec Findings:** Vulnerabilities are found in the code. Please address them before merging.`;
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: prNumber,
                  body: comment
                });
              } else {
                const noIssuesComment = "**GoSec Findings:** No issues found, Good to merge.";
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: prNumber,
                  body: noIssuesComment
                });
              }
            } else {
              console.log("This workflow wasn't triggered by a pull request, so no comment will be added.");
            }
