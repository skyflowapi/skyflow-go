/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the RecordServiceUpdateRecordBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordServiceUpdateRecordBody{}

// RecordServiceUpdateRecordBody struct for RecordServiceUpdateRecordBody
type RecordServiceUpdateRecordBody struct {
	Record *V1FieldRecords `json:"record,omitempty"`
	// If `true`, this operation returns tokens for fields with tokenization enabled.
	Tokenization *bool `json:"tokenization,omitempty"`
	Byot *V1BYOT       `json:"byot,omitempty"`
}

// NewRecordServiceUpdateRecordBody instantiates a new RecordServiceUpdateRecordBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordServiceUpdateRecordBody() *RecordServiceUpdateRecordBody {
	this := RecordServiceUpdateRecordBody{}
	var byot V1BYOT = V1BYOT_DISABLE
	this.Byot = &byot
	return &this
}

// NewRecordServiceUpdateRecordBodyWithDefaults instantiates a new RecordServiceUpdateRecordBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordServiceUpdateRecordBodyWithDefaults() *RecordServiceUpdateRecordBody {
	this := RecordServiceUpdateRecordBody{}
	var byot V1BYOT = V1BYOT_DISABLE
	this.Byot = &byot
	return &this
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *RecordServiceUpdateRecordBody) GetRecord() V1FieldRecords {
	if o == nil || IsNil(o.Record) {
		var ret V1FieldRecords
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordServiceUpdateRecordBody) GetRecordOk() (*V1FieldRecords, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *RecordServiceUpdateRecordBody) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given V1FieldRecords and assigns it to the Record field.
func (o *RecordServiceUpdateRecordBody) SetRecord(v V1FieldRecords) {
	o.Record = &v
}

// GetTokenization returns the Tokenization field value if set, zero value otherwise.
func (o *RecordServiceUpdateRecordBody) GetTokenization() bool {
	if o == nil || IsNil(o.Tokenization) {
		var ret bool
		return ret
	}
	return *o.Tokenization
}

// GetTokenizationOk returns a tuple with the Tokenization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordServiceUpdateRecordBody) GetTokenizationOk() (*bool, bool) {
	if o == nil || IsNil(o.Tokenization) {
		return nil, false
	}
	return o.Tokenization, true
}

// HasTokenization returns a boolean if a field has been set.
func (o *RecordServiceUpdateRecordBody) HasTokenization() bool {
	if o != nil && !IsNil(o.Tokenization) {
		return true
	}

	return false
}

// SetTokenization gets a reference to the given bool and assigns it to the Tokenization field.
func (o *RecordServiceUpdateRecordBody) SetTokenization(v bool) {
	o.Tokenization = &v
}

// GetByot returns the Byot field value if set, zero value otherwise.
func (o *RecordServiceUpdateRecordBody) GetByot() V1BYOT {
	if o == nil || IsNil(o.Byot) {
		var ret V1BYOT
		return ret
	}
	return *o.Byot
}

// GetByotOk returns a tuple with the Byot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordServiceUpdateRecordBody) GetByotOk() (*V1BYOT, bool) {
	if o == nil || IsNil(o.Byot) {
		return nil, false
	}
	return o.Byot, true
}

// HasByot returns a boolean if a field has been set.
func (o *RecordServiceUpdateRecordBody) HasByot() bool {
	if o != nil && !IsNil(o.Byot) {
		return true
	}

	return false
}

// SetByot gets a reference to the given V1BYOT and assigns it to the Byot field.
func (o *RecordServiceUpdateRecordBody) SetByot(v V1BYOT) {
	o.Byot = &v
}

func (o RecordServiceUpdateRecordBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordServiceUpdateRecordBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Record) {
		toSerialize["record"] = o.Record
	}
	if !IsNil(o.Tokenization) {
		toSerialize["tokenization"] = o.Tokenization
	}
	if !IsNil(o.Byot) {
		toSerialize["byot"] = o.Byot
	}
	return toSerialize, nil
}

type NullableRecordServiceUpdateRecordBody struct {
	value *RecordServiceUpdateRecordBody
	isSet bool
}

func (v NullableRecordServiceUpdateRecordBody) Get() *RecordServiceUpdateRecordBody {
	return v.value
}

func (v *NullableRecordServiceUpdateRecordBody) Set(val *RecordServiceUpdateRecordBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordServiceUpdateRecordBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordServiceUpdateRecordBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordServiceUpdateRecordBody(val *RecordServiceUpdateRecordBody) *NullableRecordServiceUpdateRecordBody {
	return &NullableRecordServiceUpdateRecordBody{value: val, isSet: true}
}

func (v NullableRecordServiceUpdateRecordBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordServiceUpdateRecordBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


