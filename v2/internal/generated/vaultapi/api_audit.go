/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AuditAPIService AuditAPI service
type AuditAPIService service

type AuditAPIAuditServiceListAuditEventsRequest struct {
	ctx context.Context
	ApiService *AuditAPIService
	filterOpsAccountID *string
	filterOpsContextChangeID *string
	filterOpsContextRequestID *string
	filterOpsContextTraceID *string
	filterOpsContextSessionID *string
	filterOpsContextActor *string
	filterOpsContextActorType *string
	filterOpsContextAccessType *string
	filterOpsContextIpAddress *string
	filterOpsContextOrigin *string
	filterOpsContextAuthMode *string
	filterOpsContextJwtID *string
	filterOpsContextBearerTokenContextID *string
	filterOpsParentAccountID *string
	filterOpsWorkspaceID *string
	filterOpsVaultID *string
	filterOpsResourceIDs *string
	filterOpsActionType *string
	filterOpsResourceType *string
	filterOpsTags *string
	filterOpsResponseCode *int32
	filterOpsStartTime *string
	filterOpsEndTime *string
	filterOpsApiName *string
	filterOpsResponseMessage *string
	filterOpsHttpMethod *string
	filterOpsHttpURI *string
	sortOpsSortBy *string
	sortOpsOrderBy *string
	afterOpsTimestamp *string
	afterOpsChangeID *string
	limit *int64
	offset *int64
}

// Resources with the specified account ID.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsAccountID(filterOpsAccountID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsAccountID = &filterOpsAccountID
	return r
}

// ID for the audit event.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextChangeID(filterOpsContextChangeID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextChangeID = &filterOpsContextChangeID
	return r
}

// ID for the request that caused the event.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextRequestID(filterOpsContextRequestID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextRequestID = &filterOpsContextRequestID
	return r
}

// ID for the request set by the service that received the request.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextTraceID(filterOpsContextTraceID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextTraceID = &filterOpsContextTraceID
	return r
}

// ID for the session in which the request was sent.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextSessionID(filterOpsContextSessionID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextSessionID = &filterOpsContextSessionID
	return r
}

// Member who sent the request. Depending on &#x60;actorType&#x60;, this may be a user ID or a service account ID.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextActor(filterOpsContextActor string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextActor = &filterOpsContextActor
	return r
}

// Type of member who sent the request.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextActorType(filterOpsContextActorType string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextActorType = &filterOpsContextActorType
	return r
}

// Type of access for the request.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextAccessType(filterOpsContextAccessType string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextAccessType = &filterOpsContextAccessType
	return r
}

// IP Address of the client that made the request.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextIpAddress(filterOpsContextIpAddress string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextIpAddress = &filterOpsContextIpAddress
	return r
}

// HTTP Origin request header (including scheme, hostname, and port) of the request.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextOrigin(filterOpsContextOrigin string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextOrigin = &filterOpsContextOrigin
	return r
}

// Authentication mode the &#x60;actor&#x60; used.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextAuthMode(filterOpsContextAuthMode string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextAuthMode = &filterOpsContextAuthMode
	return r
}

// ID of the JWT token.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextJwtID(filterOpsContextJwtID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextJwtID = &filterOpsContextJwtID
	return r
}

// Embedded User Context.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsContextBearerTokenContextID(filterOpsContextBearerTokenContextID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsContextBearerTokenContextID = &filterOpsContextBearerTokenContextID
	return r
}

// Resources with the specified parent account ID.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsParentAccountID(filterOpsParentAccountID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsParentAccountID = &filterOpsParentAccountID
	return r
}

// Resources with the specified workspace ID.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsWorkspaceID(filterOpsWorkspaceID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsWorkspaceID = &filterOpsWorkspaceID
	return r
}

// Resources with the specified vaultapi ID.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsVaultID(filterOpsVaultID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsVaultID = &filterOpsVaultID
	return r
}

// Resources with a specified ID. If a resource matches at least one ID, the associated event is returned. Format is a comma-separated list of \&quot;\\&lt;resourceType\\&gt;/\\&lt;resourceID\\&gt;\&quot;. For example, \&quot;VAULT/12345, USER/67890\&quot;.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsResourceIDs(filterOpsResourceIDs string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsResourceIDs = &filterOpsResourceIDs
	return r
}

// Events with the specified action type.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsActionType(filterOpsActionType string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsActionType = &filterOpsActionType
	return r
}

// Resources with the specified type.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsResourceType(filterOpsResourceType string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsResourceType = &filterOpsResourceType
	return r
}

// Events with associated tags. If an event matches at least one tag, the event is returned. Comma-separated list. For example, \&quot;login, get\&quot;.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsTags(filterOpsTags string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsTags = &filterOpsTags
	return r
}

// HTTP response code of the request.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsResponseCode(filterOpsResponseCode int32) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsResponseCode = &filterOpsResponseCode
	return r
}

// Start timestamp for the query, in SQL format.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsStartTime(filterOpsStartTime string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsStartTime = &filterOpsStartTime
	return r
}

// End timestamp for the query, in SQL format.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsEndTime(filterOpsEndTime string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsEndTime = &filterOpsEndTime
	return r
}

// Name of the API called in the request.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsApiName(filterOpsApiName string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsApiName = &filterOpsApiName
	return r
}

// Response message of the request.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsResponseMessage(filterOpsResponseMessage string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsResponseMessage = &filterOpsResponseMessage
	return r
}

// HTTP method of the request.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsHttpMethod(filterOpsHttpMethod string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsHttpMethod = &filterOpsHttpMethod
	return r
}

// HTTP URI of the request.
func (r AuditAPIAuditServiceListAuditEventsRequest) FilterOpsHttpURI(filterOpsHttpURI string) AuditAPIAuditServiceListAuditEventsRequest {
	r.filterOpsHttpURI = &filterOpsHttpURI
	return r
}

// Fully-qualified field by which to sort results. Field names should be in camel case (for example, \&quot;capitalization.camelCase\&quot;).
func (r AuditAPIAuditServiceListAuditEventsRequest) SortOpsSortBy(sortOpsSortBy string) AuditAPIAuditServiceListAuditEventsRequest {
	r.sortOpsSortBy = &sortOpsSortBy
	return r
}

// Ascending or descending ordering of results.
func (r AuditAPIAuditServiceListAuditEventsRequest) SortOpsOrderBy(sortOpsOrderBy string) AuditAPIAuditServiceListAuditEventsRequest {
	r.sortOpsOrderBy = &sortOpsOrderBy
	return r
}

// Timestamp provided in the previous audit response&#39;s &#x60;nextOps&#x60; attribute. An alternate way to manage response pagination. Can&#39;t be used with &#x60;sortOps&#x60; or &#x60;offset&#x60;. For the first request in a series of audit requests, leave blank.
func (r AuditAPIAuditServiceListAuditEventsRequest) AfterOpsTimestamp(afterOpsTimestamp string) AuditAPIAuditServiceListAuditEventsRequest {
	r.afterOpsTimestamp = &afterOpsTimestamp
	return r
}

// Change ID provided in the previous audit response&#39;s &#x60;nextOps&#x60; attribute. An alternate way to manage response pagination. Can&#39;t be used with &#x60;sortOps&#x60; or &#x60;offset&#x60;. For the first request in a series of audit requests, leave blank.
func (r AuditAPIAuditServiceListAuditEventsRequest) AfterOpsChangeID(afterOpsChangeID string) AuditAPIAuditServiceListAuditEventsRequest {
	r.afterOpsChangeID = &afterOpsChangeID
	return r
}

// Number of results to return.
func (r AuditAPIAuditServiceListAuditEventsRequest) Limit(limit int64) AuditAPIAuditServiceListAuditEventsRequest {
	r.limit = &limit
	return r
}

// Record position at which to start returning results.
func (r AuditAPIAuditServiceListAuditEventsRequest) Offset(offset int64) AuditAPIAuditServiceListAuditEventsRequest {
	r.offset = &offset
	return r
}

func (r AuditAPIAuditServiceListAuditEventsRequest) Execute() (*V1AuditResponse, *http.Response, error) {
	return r.ApiService.AuditServiceListAuditEventsExecute(r)
}

/*
AuditServiceListAuditEvents List Audit Events

Lists audit events that match query parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuditAPIAuditServiceListAuditEventsRequest
*/
func (a *AuditAPIService) AuditServiceListAuditEvents(ctx context.Context) AuditAPIAuditServiceListAuditEventsRequest {
	return AuditAPIAuditServiceListAuditEventsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1AuditResponse
func (a *AuditAPIService) AuditServiceListAuditEventsExecute(r AuditAPIAuditServiceListAuditEventsRequest) (*V1AuditResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1AuditResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditAPIService.AuditServiceListAuditEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/audit/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterOpsAccountID == nil {
		return localVarReturnValue, nil, reportError("filterOpsAccountID is required and must be specified")
	}

	if r.filterOpsContextChangeID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.changeID", r.filterOpsContextChangeID, "form", "")
	}
	if r.filterOpsContextRequestID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.requestID", r.filterOpsContextRequestID, "form", "")
	}
	if r.filterOpsContextTraceID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.traceID", r.filterOpsContextTraceID, "form", "")
	}
	if r.filterOpsContextSessionID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.sessionID", r.filterOpsContextSessionID, "form", "")
	}
	if r.filterOpsContextActor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.actor", r.filterOpsContextActor, "form", "")
	}
	if r.filterOpsContextActorType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.actorType", r.filterOpsContextActorType, "form", "")
	} else {
		var defaultValue string = "NONE"
		r.filterOpsContextActorType = &defaultValue
	}
	if r.filterOpsContextAccessType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.accessType", r.filterOpsContextAccessType, "form", "")
	} else {
		var defaultValue string = "ACCESS_NONE"
		r.filterOpsContextAccessType = &defaultValue
	}
	if r.filterOpsContextIpAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.ipAddress", r.filterOpsContextIpAddress, "form", "")
	}
	if r.filterOpsContextOrigin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.origin", r.filterOpsContextOrigin, "form", "")
	}
	if r.filterOpsContextAuthMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.authMode", r.filterOpsContextAuthMode, "form", "")
	} else {
		var defaultValue string = "AUTH_NONE"
		r.filterOpsContextAuthMode = &defaultValue
	}
	if r.filterOpsContextJwtID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.jwtID", r.filterOpsContextJwtID, "form", "")
	}
	if r.filterOpsContextBearerTokenContextID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.context.bearerTokenContextID", r.filterOpsContextBearerTokenContextID, "form", "")
	}
	if r.filterOpsParentAccountID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.parentAccountID", r.filterOpsParentAccountID, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.accountID", r.filterOpsAccountID, "form", "")
	if r.filterOpsWorkspaceID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.workspaceID", r.filterOpsWorkspaceID, "form", "")
	}
	if r.filterOpsVaultID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.vaultID", r.filterOpsVaultID, "form", "")
	}
	if r.filterOpsResourceIDs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.resourceIDs", r.filterOpsResourceIDs, "form", "")
	}
	if r.filterOpsActionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.actionType", r.filterOpsActionType, "form", "")
	} else {
		var defaultValue string = "NONE"
		r.filterOpsActionType = &defaultValue
	}
	if r.filterOpsResourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.resourceType", r.filterOpsResourceType, "form", "")
	} else {
		var defaultValue string = "NONE_API"
		r.filterOpsResourceType = &defaultValue
	}
	if r.filterOpsTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.tags", r.filterOpsTags, "form", "")
	}
	if r.filterOpsResponseCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.responseCode", r.filterOpsResponseCode, "form", "")
	}
	if r.filterOpsStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.startTime", r.filterOpsStartTime, "form", "")
	}
	if r.filterOpsEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.endTime", r.filterOpsEndTime, "form", "")
	}
	if r.filterOpsApiName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.apiName", r.filterOpsApiName, "form", "")
	}
	if r.filterOpsResponseMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.responseMessage", r.filterOpsResponseMessage, "form", "")
	}
	if r.filterOpsHttpMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.httpMethod", r.filterOpsHttpMethod, "form", "")
	}
	if r.filterOpsHttpURI != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOps.httpURI", r.filterOpsHttpURI, "form", "")
	}
	if r.sortOpsSortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOps.sortBy", r.sortOpsSortBy, "form", "")
	}
	if r.sortOpsOrderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOps.orderBy", r.sortOpsOrderBy, "form", "")
	} else {
		var defaultValue string = "ASCENDING"
		r.sortOpsOrderBy = &defaultValue
	}
	if r.afterOpsTimestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "afterOps.timestamp", r.afterOpsTimestamp, "form", "")
	}
	if r.afterOpsChangeID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "afterOps.changeID", r.afterOpsChangeID, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 25
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int64 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
