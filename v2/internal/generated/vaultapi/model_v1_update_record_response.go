/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the V1UpdateRecordResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1UpdateRecordResponse{}

// V1UpdateRecordResponse struct for V1UpdateRecordResponse
type V1UpdateRecordResponse struct {
	// ID of the updated record.
	SkyflowId *string `json:"skyflow_id,omitempty"`
	// Tokens for the record.
	Tokens map[string]interface{} `json:"tokens,omitempty"`
}

// NewV1UpdateRecordResponse instantiates a new V1UpdateRecordResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1UpdateRecordResponse() *V1UpdateRecordResponse {
	this := V1UpdateRecordResponse{}
	return &this
}

// NewV1UpdateRecordResponseWithDefaults instantiates a new V1UpdateRecordResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1UpdateRecordResponseWithDefaults() *V1UpdateRecordResponse {
	this := V1UpdateRecordResponse{}
	return &this
}

// GetSkyflowId returns the SkyflowId field value if set, zero value otherwise.
func (o *V1UpdateRecordResponse) GetSkyflowId() string {
	if o == nil || IsNil(o.SkyflowId) {
		var ret string
		return ret
	}
	return *o.SkyflowId
}

// GetSkyflowIdOk returns a tuple with the SkyflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UpdateRecordResponse) GetSkyflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.SkyflowId) {
		return nil, false
	}
	return o.SkyflowId, true
}

// HasSkyflowId returns a boolean if a field has been set.
func (o *V1UpdateRecordResponse) HasSkyflowId() bool {
	if o != nil && !IsNil(o.SkyflowId) {
		return true
	}

	return false
}

// SetSkyflowId gets a reference to the given string and assigns it to the SkyflowId field.
func (o *V1UpdateRecordResponse) SetSkyflowId(v string) {
	o.SkyflowId = &v
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *V1UpdateRecordResponse) GetTokens() map[string]interface{} {
	if o == nil || IsNil(o.Tokens) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UpdateRecordResponse) GetTokensOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tokens) {
		return map[string]interface{}{}, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *V1UpdateRecordResponse) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given map[string]interface{} and assigns it to the Tokens field.
func (o *V1UpdateRecordResponse) SetTokens(v map[string]interface{}) {
	o.Tokens = v
}

func (o V1UpdateRecordResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1UpdateRecordResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SkyflowId) {
		toSerialize["skyflow_id"] = o.SkyflowId
	}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	return toSerialize, nil
}

type NullableV1UpdateRecordResponse struct {
	value *V1UpdateRecordResponse
	isSet bool
}

func (v NullableV1UpdateRecordResponse) Get() *V1UpdateRecordResponse {
	return v.value
}

func (v *NullableV1UpdateRecordResponse) Set(val *V1UpdateRecordResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1UpdateRecordResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1UpdateRecordResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1UpdateRecordResponse(val *V1UpdateRecordResponse) *NullableV1UpdateRecordResponse {
	return &NullableV1UpdateRecordResponse{value: val, isSet: true}
}

func (v NullableV1UpdateRecordResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1UpdateRecordResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


