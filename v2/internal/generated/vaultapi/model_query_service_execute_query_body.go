/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the QueryServiceExecuteQueryBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryServiceExecuteQueryBody{}

// QueryServiceExecuteQueryBody struct for QueryServiceExecuteQueryBody
type QueryServiceExecuteQueryBody struct {
	// The SQL query to execute.<br><br><b>Supported commands:</b> <ul> <li><code>SELECT</code></li> </ul> <b>Supported operators:</b> <ul> <li><code>&gt;</code></li> <li><code>&lt;</code></li> <li><code>=</code></li> <li><code>AND</code></li> <li><code>OR</code></li> <li><code>NOT</code></li> <li><code>LIKE</code></li> <li><code>ILIKE</code></li> <li><code>NULL</code></li> <li><code>NOT NULL</code></li> </ul> <b>Supported keywords:</b> <ul> <li><code>FROM</code></li> <li><code>JOIN</code></li> <li><code>INNER JOIN</code></li> <li><code>LEFT OUTER JOIN</code></li> <li><code>LEFT JOIN</code></li> <li><code>RIGHT OUTER JOIN</code></li> <li><code>RIGHT JOIN</code></li> <li><code>FULL OUTER JOIN</code></li> <li><code>FULL JOIN</code></li> <li><code>OFFSET</code></li> <li><code>LIMIT</code></li> <li><code>WHERE</code></li> </ul> <b>Supported functions:</b> <ul> <li><code>AVG()</code></li> <li><code>SUM()</code></li> <li><code>COUNT()</code></li> <li><code>MIN()</code></li> <li><code>MAX()</code></li> <li><code>REDACTION()</code></li> </ul>
	Query *string `json:"query,omitempty"`
}

// NewQueryServiceExecuteQueryBody instantiates a new QueryServiceExecuteQueryBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryServiceExecuteQueryBody() *QueryServiceExecuteQueryBody {
	this := QueryServiceExecuteQueryBody{}
	return &this
}

// NewQueryServiceExecuteQueryBodyWithDefaults instantiates a new QueryServiceExecuteQueryBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryServiceExecuteQueryBodyWithDefaults() *QueryServiceExecuteQueryBody {
	this := QueryServiceExecuteQueryBody{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *QueryServiceExecuteQueryBody) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryServiceExecuteQueryBody) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *QueryServiceExecuteQueryBody) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *QueryServiceExecuteQueryBody) SetQuery(v string) {
	o.Query = &v
}

func (o QueryServiceExecuteQueryBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryServiceExecuteQueryBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableQueryServiceExecuteQueryBody struct {
	value *QueryServiceExecuteQueryBody
	isSet bool
}

func (v NullableQueryServiceExecuteQueryBody) Get() *QueryServiceExecuteQueryBody {
	return v.value
}

func (v *NullableQueryServiceExecuteQueryBody) Set(val *QueryServiceExecuteQueryBody) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryServiceExecuteQueryBody) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryServiceExecuteQueryBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryServiceExecuteQueryBody(val *QueryServiceExecuteQueryBody) *NullableQueryServiceExecuteQueryBody {
	return &NullableQueryServiceExecuteQueryBody{value: val, isSet: true}
}

func (v NullableQueryServiceExecuteQueryBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryServiceExecuteQueryBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


