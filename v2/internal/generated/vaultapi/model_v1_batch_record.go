/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the V1BatchRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1BatchRecord{}

// V1BatchRecord struct for V1BatchRecord
type V1BatchRecord struct {
	// Field and value key pairs. For example, `{'field_1':'value_1', 'field_2':'value_2'}`. Only valid when `method` is `POST` or `PUT`.
	Fields map[string]interface{} `json:"fields,omitempty"`
	// Name of the table to perform the operation on.
	TableName *string         `json:"tableName,omitempty"`
	Method *BatchRecordMethod `json:"method,omitempty"`
	// ID to group operations by. Operations in the same group are executed sequentially.
	BatchID *string                   `json:"batchID,omitempty"`
	Redaction *RedactionEnumREDACTION `json:"redaction,omitempty"`
	// If `true`, this operation returns tokens for fields with tokenization enabled. Only applicable if `skyflow_id` values are specified.
	Tokenization *bool `json:"tokenization,omitempty"`
	// `skyflow_id` for the record. Only valid when `method` is `GET`, `DELETE`, or `PUT`.
	ID *string `json:"ID,omitempty"`
	// If `true`, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean.
	DownloadURL *bool `json:"downloadURL,omitempty"`
	// Column that stores primary keys for upsert operations. The column must be marked as unique in the vaultapi schema. Only valid when `method` is `POST`.
	Upsert *string `json:"upsert,omitempty"`
	// Fields and tokens for the record. For example, `{'field_1':'token_1', 'field_2':'token_2'}`.
	Tokens map[string]interface{} `json:"tokens,omitempty"`
}

// NewV1BatchRecord instantiates a new V1BatchRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1BatchRecord() *V1BatchRecord {
	this := V1BatchRecord{}
	var method BatchRecordMethod = BATCHRECORDMETHOD_NONE
	this.Method = &method
	var redaction RedactionEnumREDACTION = REDACTIONENUMREDACTION_DEFAULT
	this.Redaction = &redaction
	return &this
}

// NewV1BatchRecordWithDefaults instantiates a new V1BatchRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1BatchRecordWithDefaults() *V1BatchRecord {
	this := V1BatchRecord{}
	var method BatchRecordMethod = BATCHRECORDMETHOD_NONE
	this.Method = &method
	var redaction RedactionEnumREDACTION = REDACTIONENUMREDACTION_DEFAULT
	this.Redaction = &redaction
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *V1BatchRecord) GetFields() map[string]interface{} {
	if o == nil || IsNil(o.Fields) {
		var ret map[string]interface{}
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchRecord) GetFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Fields) {
		return map[string]interface{}{}, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *V1BatchRecord) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]interface{} and assigns it to the Fields field.
func (o *V1BatchRecord) SetFields(v map[string]interface{}) {
	o.Fields = v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *V1BatchRecord) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchRecord) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *V1BatchRecord) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *V1BatchRecord) SetTableName(v string) {
	o.TableName = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *V1BatchRecord) GetMethod() BatchRecordMethod {
	if o == nil || IsNil(o.Method) {
		var ret BatchRecordMethod
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchRecord) GetMethodOk() (*BatchRecordMethod, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *V1BatchRecord) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given BatchRecordMethod and assigns it to the Method field.
func (o *V1BatchRecord) SetMethod(v BatchRecordMethod) {
	o.Method = &v
}

// GetBatchID returns the BatchID field value if set, zero value otherwise.
func (o *V1BatchRecord) GetBatchID() string {
	if o == nil || IsNil(o.BatchID) {
		var ret string
		return ret
	}
	return *o.BatchID
}

// GetBatchIDOk returns a tuple with the BatchID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchRecord) GetBatchIDOk() (*string, bool) {
	if o == nil || IsNil(o.BatchID) {
		return nil, false
	}
	return o.BatchID, true
}

// HasBatchID returns a boolean if a field has been set.
func (o *V1BatchRecord) HasBatchID() bool {
	if o != nil && !IsNil(o.BatchID) {
		return true
	}

	return false
}

// SetBatchID gets a reference to the given string and assigns it to the BatchID field.
func (o *V1BatchRecord) SetBatchID(v string) {
	o.BatchID = &v
}

// GetRedaction returns the Redaction field value if set, zero value otherwise.
func (o *V1BatchRecord) GetRedaction() RedactionEnumREDACTION {
	if o == nil || IsNil(o.Redaction) {
		var ret RedactionEnumREDACTION
		return ret
	}
	return *o.Redaction
}

// GetRedactionOk returns a tuple with the Redaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchRecord) GetRedactionOk() (*RedactionEnumREDACTION, bool) {
	if o == nil || IsNil(o.Redaction) {
		return nil, false
	}
	return o.Redaction, true
}

// HasRedaction returns a boolean if a field has been set.
func (o *V1BatchRecord) HasRedaction() bool {
	if o != nil && !IsNil(o.Redaction) {
		return true
	}

	return false
}

// SetRedaction gets a reference to the given RedactionEnumREDACTION and assigns it to the Redaction field.
func (o *V1BatchRecord) SetRedaction(v RedactionEnumREDACTION) {
	o.Redaction = &v
}

// GetTokenization returns the Tokenization field value if set, zero value otherwise.
func (o *V1BatchRecord) GetTokenization() bool {
	if o == nil || IsNil(o.Tokenization) {
		var ret bool
		return ret
	}
	return *o.Tokenization
}

// GetTokenizationOk returns a tuple with the Tokenization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchRecord) GetTokenizationOk() (*bool, bool) {
	if o == nil || IsNil(o.Tokenization) {
		return nil, false
	}
	return o.Tokenization, true
}

// HasTokenization returns a boolean if a field has been set.
func (o *V1BatchRecord) HasTokenization() bool {
	if o != nil && !IsNil(o.Tokenization) {
		return true
	}

	return false
}

// SetTokenization gets a reference to the given bool and assigns it to the Tokenization field.
func (o *V1BatchRecord) SetTokenization(v bool) {
	o.Tokenization = &v
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *V1BatchRecord) GetID() string {
	if o == nil || IsNil(o.ID) {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchRecord) GetIDOk() (*string, bool) {
	if o == nil || IsNil(o.ID) {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *V1BatchRecord) HasID() bool {
	if o != nil && !IsNil(o.ID) {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *V1BatchRecord) SetID(v string) {
	o.ID = &v
}

// GetDownloadURL returns the DownloadURL field value if set, zero value otherwise.
func (o *V1BatchRecord) GetDownloadURL() bool {
	if o == nil || IsNil(o.DownloadURL) {
		var ret bool
		return ret
	}
	return *o.DownloadURL
}

// GetDownloadURLOk returns a tuple with the DownloadURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchRecord) GetDownloadURLOk() (*bool, bool) {
	if o == nil || IsNil(o.DownloadURL) {
		return nil, false
	}
	return o.DownloadURL, true
}

// HasDownloadURL returns a boolean if a field has been set.
func (o *V1BatchRecord) HasDownloadURL() bool {
	if o != nil && !IsNil(o.DownloadURL) {
		return true
	}

	return false
}

// SetDownloadURL gets a reference to the given bool and assigns it to the DownloadURL field.
func (o *V1BatchRecord) SetDownloadURL(v bool) {
	o.DownloadURL = &v
}

// GetUpsert returns the Upsert field value if set, zero value otherwise.
func (o *V1BatchRecord) GetUpsert() string {
	if o == nil || IsNil(o.Upsert) {
		var ret string
		return ret
	}
	return *o.Upsert
}

// GetUpsertOk returns a tuple with the Upsert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchRecord) GetUpsertOk() (*string, bool) {
	if o == nil || IsNil(o.Upsert) {
		return nil, false
	}
	return o.Upsert, true
}

// HasUpsert returns a boolean if a field has been set.
func (o *V1BatchRecord) HasUpsert() bool {
	if o != nil && !IsNil(o.Upsert) {
		return true
	}

	return false
}

// SetUpsert gets a reference to the given string and assigns it to the Upsert field.
func (o *V1BatchRecord) SetUpsert(v string) {
	o.Upsert = &v
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *V1BatchRecord) GetTokens() map[string]interface{} {
	if o == nil || IsNil(o.Tokens) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchRecord) GetTokensOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tokens) {
		return map[string]interface{}{}, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *V1BatchRecord) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given map[string]interface{} and assigns it to the Tokens field.
func (o *V1BatchRecord) SetTokens(v map[string]interface{}) {
	o.Tokens = v
}

func (o V1BatchRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1BatchRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.TableName) {
		toSerialize["tableName"] = o.TableName
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.BatchID) {
		toSerialize["batchID"] = o.BatchID
	}
	if !IsNil(o.Redaction) {
		toSerialize["redaction"] = o.Redaction
	}
	if !IsNil(o.Tokenization) {
		toSerialize["tokenization"] = o.Tokenization
	}
	if !IsNil(o.ID) {
		toSerialize["ID"] = o.ID
	}
	if !IsNil(o.DownloadURL) {
		toSerialize["downloadURL"] = o.DownloadURL
	}
	if !IsNil(o.Upsert) {
		toSerialize["upsert"] = o.Upsert
	}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	return toSerialize, nil
}

type NullableV1BatchRecord struct {
	value *V1BatchRecord
	isSet bool
}

func (v NullableV1BatchRecord) Get() *V1BatchRecord {
	return v.value
}

func (v *NullableV1BatchRecord) Set(val *V1BatchRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BatchRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BatchRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BatchRecord(val *V1BatchRecord) *NullableV1BatchRecord {
	return &NullableV1BatchRecord{value: val, isSet: true}
}

func (v NullableV1BatchRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BatchRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


