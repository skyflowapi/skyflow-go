/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the V1BatchOperationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1BatchOperationResponse{}

// V1BatchOperationResponse struct for V1BatchOperationResponse
type V1BatchOperationResponse struct {
	// ID of the vaultapi.
	VaultID *string `json:"vaultID,omitempty"`
	// Responses in the same order as in the request. Responses have the same payload structure as their corresponding APIs: <br/><ul><li>`POST` returns an Insert Records response.</li><li>`PUT` returns an Update Record response.</li><li>`GET` returns a Get Record response.</li><li>`DELETE` returns a Delete Record response.</li></ul>
	Responses []map[string]interface{} `json:"responses,omitempty"`
}

// NewV1BatchOperationResponse instantiates a new V1BatchOperationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1BatchOperationResponse() *V1BatchOperationResponse {
	this := V1BatchOperationResponse{}
	return &this
}

// NewV1BatchOperationResponseWithDefaults instantiates a new V1BatchOperationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1BatchOperationResponseWithDefaults() *V1BatchOperationResponse {
	this := V1BatchOperationResponse{}
	return &this
}

// GetVaultID returns the VaultID field value if set, zero value otherwise.
func (o *V1BatchOperationResponse) GetVaultID() string {
	if o == nil || IsNil(o.VaultID) {
		var ret string
		return ret
	}
	return *o.VaultID
}

// GetVaultIDOk returns a tuple with the VaultID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchOperationResponse) GetVaultIDOk() (*string, bool) {
	if o == nil || IsNil(o.VaultID) {
		return nil, false
	}
	return o.VaultID, true
}

// HasVaultID returns a boolean if a field has been set.
func (o *V1BatchOperationResponse) HasVaultID() bool {
	if o != nil && !IsNil(o.VaultID) {
		return true
	}

	return false
}

// SetVaultID gets a reference to the given string and assigns it to the VaultID field.
func (o *V1BatchOperationResponse) SetVaultID(v string) {
	o.VaultID = &v
}

// GetResponses returns the Responses field value if set, zero value otherwise.
func (o *V1BatchOperationResponse) GetResponses() []map[string]interface{} {
	if o == nil || IsNil(o.Responses) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Responses
}

// GetResponsesOk returns a tuple with the Responses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BatchOperationResponse) GetResponsesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Responses) {
		return nil, false
	}
	return o.Responses, true
}

// HasResponses returns a boolean if a field has been set.
func (o *V1BatchOperationResponse) HasResponses() bool {
	if o != nil && !IsNil(o.Responses) {
		return true
	}

	return false
}

// SetResponses gets a reference to the given []map[string]interface{} and assigns it to the Responses field.
func (o *V1BatchOperationResponse) SetResponses(v []map[string]interface{}) {
	o.Responses = v
}

func (o V1BatchOperationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1BatchOperationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VaultID) {
		toSerialize["vaultID"] = o.VaultID
	}
	if !IsNil(o.Responses) {
		toSerialize["responses"] = o.Responses
	}
	return toSerialize, nil
}

type NullableV1BatchOperationResponse struct {
	value *V1BatchOperationResponse
	isSet bool
}

func (v NullableV1BatchOperationResponse) Get() *V1BatchOperationResponse {
	return v.value
}

func (v *NullableV1BatchOperationResponse) Set(val *V1BatchOperationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BatchOperationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BatchOperationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BatchOperationResponse(val *V1BatchOperationResponse) *NullableV1BatchOperationResponse {
	return &NullableV1BatchOperationResponse{value: val, isSet: true}
}

func (v NullableV1BatchOperationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BatchOperationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


