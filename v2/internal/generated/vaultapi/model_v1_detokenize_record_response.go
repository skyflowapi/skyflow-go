/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the V1DetokenizeRecordResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DetokenizeRecordResponse{}

// V1DetokenizeRecordResponse struct for V1DetokenizeRecordResponse
type V1DetokenizeRecordResponse struct {
	// Token of the record.
	Token *string                                `json:"token,omitempty"`
	ValueType *DetokenizeRecordResponseValueType `json:"valueType,omitempty"`
	// Data corresponding to the token.
	Value *string `json:"value,omitempty"`
	// Error if token isn't found.
	Error *string `json:"error,omitempty"`
}

// NewV1DetokenizeRecordResponse instantiates a new V1DetokenizeRecordResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DetokenizeRecordResponse() *V1DetokenizeRecordResponse {
	this := V1DetokenizeRecordResponse{}
	var valueType DetokenizeRecordResponseValueType = DETOKENIZERECORDRESPONSEVALUETYPE_NONE
	this.ValueType = &valueType
	return &this
}

// NewV1DetokenizeRecordResponseWithDefaults instantiates a new V1DetokenizeRecordResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DetokenizeRecordResponseWithDefaults() *V1DetokenizeRecordResponse {
	this := V1DetokenizeRecordResponse{}
	var valueType DetokenizeRecordResponseValueType = DETOKENIZERECORDRESPONSEVALUETYPE_NONE
	this.ValueType = &valueType
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *V1DetokenizeRecordResponse) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DetokenizeRecordResponse) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *V1DetokenizeRecordResponse) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *V1DetokenizeRecordResponse) SetToken(v string) {
	o.Token = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *V1DetokenizeRecordResponse) GetValueType() DetokenizeRecordResponseValueType {
	if o == nil || IsNil(o.ValueType) {
		var ret DetokenizeRecordResponseValueType
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DetokenizeRecordResponse) GetValueTypeOk() (*DetokenizeRecordResponseValueType, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *V1DetokenizeRecordResponse) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given DetokenizeRecordResponseValueType and assigns it to the ValueType field.
func (o *V1DetokenizeRecordResponse) SetValueType(v DetokenizeRecordResponseValueType) {
	o.ValueType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *V1DetokenizeRecordResponse) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DetokenizeRecordResponse) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *V1DetokenizeRecordResponse) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *V1DetokenizeRecordResponse) SetValue(v string) {
	o.Value = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *V1DetokenizeRecordResponse) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DetokenizeRecordResponse) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *V1DetokenizeRecordResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *V1DetokenizeRecordResponse) SetError(v string) {
	o.Error = &v
}

func (o V1DetokenizeRecordResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DetokenizeRecordResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.ValueType) {
		toSerialize["valueType"] = o.ValueType
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableV1DetokenizeRecordResponse struct {
	value *V1DetokenizeRecordResponse
	isSet bool
}

func (v NullableV1DetokenizeRecordResponse) Get() *V1DetokenizeRecordResponse {
	return v.value
}

func (v *NullableV1DetokenizeRecordResponse) Set(val *V1DetokenizeRecordResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DetokenizeRecordResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DetokenizeRecordResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DetokenizeRecordResponse(val *V1DetokenizeRecordResponse) *NullableV1DetokenizeRecordResponse {
	return &NullableV1DetokenizeRecordResponse{value: val, isSet: true}
}

func (v NullableV1DetokenizeRecordResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DetokenizeRecordResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


