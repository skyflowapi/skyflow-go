/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
	"fmt"
)

// V1MemberType Type of the member.
type V1MemberType string

// List of v1MemberType
const (
	V1MEMBERTYPE_NONE            V1MemberType = "NONE"
	V1MEMBERTYPE_USER            V1MemberType = "USER"
	V1MEMBERTYPE_SERVICE_ACCOUNT V1MemberType = "SERVICE_ACCOUNT"
)

// All allowed values of V1MemberType enum
var AllowedV1MemberTypeEnumValues = []V1MemberType{
	"NONE",
	"USER",
	"SERVICE_ACCOUNT",
}

func (v *V1MemberType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1MemberType(value)
	for _, existing := range AllowedV1MemberTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1MemberType", value)
}

// NewV1MemberTypeFromValue returns a pointer to a valid V1MemberType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1MemberTypeFromValue(v string) (*V1MemberType, error) {
	ev := V1MemberType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1MemberType: valid values are %v", v, AllowedV1MemberTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1MemberType) IsValid() bool {
	for _, existing := range AllowedV1MemberTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1MemberType value
func (v V1MemberType) Ptr() *V1MemberType {
	return &v
}

type NullableV1MemberType struct {
	value *V1MemberType
	isSet bool
}

func (v NullableV1MemberType) Get() *V1MemberType {
	return v.value
}

func (v *NullableV1MemberType) Set(val *V1MemberType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1MemberType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1MemberType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1MemberType(val *V1MemberType) *NullableV1MemberType {
	return &NullableV1MemberType{value: val, isSet: true}
}

func (v NullableV1MemberType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1MemberType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

