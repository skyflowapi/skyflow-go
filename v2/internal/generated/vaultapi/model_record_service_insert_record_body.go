/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the RecordServiceInsertRecordBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordServiceInsertRecordBody{}

// RecordServiceInsertRecordBody struct for RecordServiceInsertRecordBody
type RecordServiceInsertRecordBody struct {
	// Record values and tokens.
	Records []V1FieldRecords `json:"records,omitempty"`
	// If `true`, this operation returns tokens for fields with tokenization enabled.
	Tokenization *bool `json:"tokenization,omitempty"`
	// Name of a unique column in the table. Uses upsert operations to check if a record exists based on the unique column's value. If a matching record exists, the record updates with the values you provide. If a matching record doesn't exist, the upsert operation inserts a new record.<br /><br />When you upsert a field, include the entire contents you want the field to store. For JSON fields, include all nested fields and values. If a nested field isn't included, it's removed.
	Upsert *string `json:"upsert,omitempty"`
	// If `true`, this operation mandates that all the records have the same fields. This parameter does not work with upsert.
	Homogeneous *bool `json:"homogeneous,omitempty"`
	Byot *V1BYOT      `json:"byot,omitempty"`
}

// NewRecordServiceInsertRecordBody instantiates a new RecordServiceInsertRecordBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordServiceInsertRecordBody() *RecordServiceInsertRecordBody {
	this := RecordServiceInsertRecordBody{}
	var homogeneous bool = false
	this.Homogeneous = &homogeneous
	var byot V1BYOT = V1BYOT_DISABLE
	this.Byot = &byot
	return &this
}

// NewRecordServiceInsertRecordBodyWithDefaults instantiates a new RecordServiceInsertRecordBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordServiceInsertRecordBodyWithDefaults() *RecordServiceInsertRecordBody {
	this := RecordServiceInsertRecordBody{}
	var homogeneous bool = false
	this.Homogeneous = &homogeneous
	var byot V1BYOT = V1BYOT_DISABLE
	this.Byot = &byot
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *RecordServiceInsertRecordBody) GetRecords() []V1FieldRecords {
	if o == nil || IsNil(o.Records) {
		var ret []V1FieldRecords
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordServiceInsertRecordBody) GetRecordsOk() ([]V1FieldRecords, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *RecordServiceInsertRecordBody) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []V1FieldRecords and assigns it to the Records field.
func (o *RecordServiceInsertRecordBody) SetRecords(v []V1FieldRecords) {
	o.Records = v
}

// GetTokenization returns the Tokenization field value if set, zero value otherwise.
func (o *RecordServiceInsertRecordBody) GetTokenization() bool {
	if o == nil || IsNil(o.Tokenization) {
		var ret bool
		return ret
	}
	return *o.Tokenization
}

// GetTokenizationOk returns a tuple with the Tokenization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordServiceInsertRecordBody) GetTokenizationOk() (*bool, bool) {
	if o == nil || IsNil(o.Tokenization) {
		return nil, false
	}
	return o.Tokenization, true
}

// HasTokenization returns a boolean if a field has been set.
func (o *RecordServiceInsertRecordBody) HasTokenization() bool {
	if o != nil && !IsNil(o.Tokenization) {
		return true
	}

	return false
}

// SetTokenization gets a reference to the given bool and assigns it to the Tokenization field.
func (o *RecordServiceInsertRecordBody) SetTokenization(v bool) {
	o.Tokenization = &v
}

// GetUpsert returns the Upsert field value if set, zero value otherwise.
func (o *RecordServiceInsertRecordBody) GetUpsert() string {
	if o == nil || IsNil(o.Upsert) {
		var ret string
		return ret
	}
	return *o.Upsert
}

// GetUpsertOk returns a tuple with the Upsert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordServiceInsertRecordBody) GetUpsertOk() (*string, bool) {
	if o == nil || IsNil(o.Upsert) {
		return nil, false
	}
	return o.Upsert, true
}

// HasUpsert returns a boolean if a field has been set.
func (o *RecordServiceInsertRecordBody) HasUpsert() bool {
	if o != nil && !IsNil(o.Upsert) {
		return true
	}

	return false
}

// SetUpsert gets a reference to the given string and assigns it to the Upsert field.
func (o *RecordServiceInsertRecordBody) SetUpsert(v string) {
	o.Upsert = &v
}

// GetHomogeneous returns the Homogeneous field value if set, zero value otherwise.
func (o *RecordServiceInsertRecordBody) GetHomogeneous() bool {
	if o == nil || IsNil(o.Homogeneous) {
		var ret bool
		return ret
	}
	return *o.Homogeneous
}

// GetHomogeneousOk returns a tuple with the Homogeneous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordServiceInsertRecordBody) GetHomogeneousOk() (*bool, bool) {
	if o == nil || IsNil(o.Homogeneous) {
		return nil, false
	}
	return o.Homogeneous, true
}

// HasHomogeneous returns a boolean if a field has been set.
func (o *RecordServiceInsertRecordBody) HasHomogeneous() bool {
	if o != nil && !IsNil(o.Homogeneous) {
		return true
	}

	return false
}

// SetHomogeneous gets a reference to the given bool and assigns it to the Homogeneous field.
func (o *RecordServiceInsertRecordBody) SetHomogeneous(v bool) {
	o.Homogeneous = &v
}

// GetByot returns the Byot field value if set, zero value otherwise.
func (o *RecordServiceInsertRecordBody) GetByot() V1BYOT {
	if o == nil || IsNil(o.Byot) {
		var ret V1BYOT
		return ret
	}
	return *o.Byot
}

// GetByotOk returns a tuple with the Byot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordServiceInsertRecordBody) GetByotOk() (*V1BYOT, bool) {
	if o == nil || IsNil(o.Byot) {
		return nil, false
	}
	return o.Byot, true
}

// HasByot returns a boolean if a field has been set.
func (o *RecordServiceInsertRecordBody) HasByot() bool {
	if o != nil && !IsNil(o.Byot) {
		return true
	}

	return false
}

// SetByot gets a reference to the given V1BYOT and assigns it to the Byot field.
func (o *RecordServiceInsertRecordBody) SetByot(v V1BYOT) {
	o.Byot = &v
}

func (o RecordServiceInsertRecordBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordServiceInsertRecordBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	if !IsNil(o.Tokenization) {
		toSerialize["tokenization"] = o.Tokenization
	}
	if !IsNil(o.Upsert) {
		toSerialize["upsert"] = o.Upsert
	}
	if !IsNil(o.Homogeneous) {
		toSerialize["homogeneous"] = o.Homogeneous
	}
	if !IsNil(o.Byot) {
		toSerialize["byot"] = o.Byot
	}
	return toSerialize, nil
}

type NullableRecordServiceInsertRecordBody struct {
	value *RecordServiceInsertRecordBody
	isSet bool
}

func (v NullableRecordServiceInsertRecordBody) Get() *RecordServiceInsertRecordBody {
	return v.value
}

func (v *NullableRecordServiceInsertRecordBody) Set(val *RecordServiceInsertRecordBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordServiceInsertRecordBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordServiceInsertRecordBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordServiceInsertRecordBody(val *RecordServiceInsertRecordBody) *NullableRecordServiceInsertRecordBody {
	return &NullableRecordServiceInsertRecordBody{value: val, isSet: true}
}

func (v NullableRecordServiceInsertRecordBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordServiceInsertRecordBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


