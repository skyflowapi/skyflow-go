/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
	"fmt"
)

// ContextAccessType Type of access for the request.
type ContextAccessType string

// List of ContextAccessType
const (
	CONTEXTACCESSTYPE_ACCESS_NONE ContextAccessType = "ACCESS_NONE"
	CONTEXTACCESSTYPE_API         ContextAccessType = "API"
	CONTEXTACCESSTYPE_SQL         ContextAccessType = "SQL"
)

// All allowed values of ContextAccessType enum
var AllowedContextAccessTypeEnumValues = []ContextAccessType{
	"ACCESS_NONE",
	"API",
	"SQL",
}

func (v *ContextAccessType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContextAccessType(value)
	for _, existing := range AllowedContextAccessTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContextAccessType", value)
}

// NewContextAccessTypeFromValue returns a pointer to a valid ContextAccessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContextAccessTypeFromValue(v string) (*ContextAccessType, error) {
	ev := ContextAccessType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContextAccessType: valid values are %v", v, AllowedContextAccessTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContextAccessType) IsValid() bool {
	for _, existing := range AllowedContextAccessTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContextAccessType value
func (v ContextAccessType) Ptr() *ContextAccessType {
	return &v
}

type NullableContextAccessType struct {
	value *ContextAccessType
	isSet bool
}

func (v NullableContextAccessType) Get() *ContextAccessType {
	return v.value
}

func (v *NullableContextAccessType) Set(val *ContextAccessType) {
	v.value = val
	v.isSet = true
}

func (v NullableContextAccessType) IsSet() bool {
	return v.isSet
}

func (v *NullableContextAccessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextAccessType(val *ContextAccessType) *NullableContextAccessType {
	return &NullableContextAccessType{value: val, isSet: true}
}

func (v NullableContextAccessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextAccessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

