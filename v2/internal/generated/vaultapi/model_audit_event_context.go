/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the AuditEventContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditEventContext{}

// AuditEventContext Context for an audit event.
type AuditEventContext struct {
	// ID for the audit event.
	ChangeID *string `json:"changeID,omitempty"`
	// ID for the request that caused the event.
	RequestID *string `json:"requestID,omitempty"`
	// ID for the request set by the service that received the request.
	TraceID *string `json:"traceID,omitempty"`
	// ID for the session in which the request was sent.
	SessionID *string `json:"sessionID,omitempty"`
	// Member who sent the request. Depending on `actorType`, this may be a user ID or a service account ID.
	Actor *string                 `json:"actor,omitempty"`
	ActorType *V1MemberType       `json:"actorType,omitempty"`
	AccessType *ContextAccessType `json:"accessType,omitempty"`
	// IP Address of the client that made the request.
	IpAddress *string `json:"ipAddress,omitempty"`
	// HTTP Origin request header (including scheme, hostname, and port) of the request.
	Origin *string            `json:"origin,omitempty"`
	AuthMode *ContextAuthMode `json:"authMode,omitempty"`
	// ID of the JWT token.
	JwtID *string `json:"jwtID,omitempty"`
	// Embedded User Context.
	BearerTokenContextID *string `json:"bearerTokenContextID,omitempty"`
}

// NewAuditEventContext instantiates a new AuditEventContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditEventContext() *AuditEventContext {
	this := AuditEventContext{}
	var actorType V1MemberType = V1MEMBERTYPE_NONE
	this.ActorType = &actorType
	var accessType ContextAccessType = CONTEXTACCESSTYPE_ACCESS_NONE
	this.AccessType = &accessType
	var authMode ContextAuthMode = CONTEXTAUTHMODE_AUTH_NONE
	this.AuthMode = &authMode
	return &this
}

// NewAuditEventContextWithDefaults instantiates a new AuditEventContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditEventContextWithDefaults() *AuditEventContext {
	this := AuditEventContext{}
	var actorType V1MemberType = V1MEMBERTYPE_NONE
	this.ActorType = &actorType
	var accessType ContextAccessType = CONTEXTACCESSTYPE_ACCESS_NONE
	this.AccessType = &accessType
	var authMode ContextAuthMode = CONTEXTAUTHMODE_AUTH_NONE
	this.AuthMode = &authMode
	return &this
}

// GetChangeID returns the ChangeID field value if set, zero value otherwise.
func (o *AuditEventContext) GetChangeID() string {
	if o == nil || IsNil(o.ChangeID) {
		var ret string
		return ret
	}
	return *o.ChangeID
}

// GetChangeIDOk returns a tuple with the ChangeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetChangeIDOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeID) {
		return nil, false
	}
	return o.ChangeID, true
}

// HasChangeID returns a boolean if a field has been set.
func (o *AuditEventContext) HasChangeID() bool {
	if o != nil && !IsNil(o.ChangeID) {
		return true
	}

	return false
}

// SetChangeID gets a reference to the given string and assigns it to the ChangeID field.
func (o *AuditEventContext) SetChangeID(v string) {
	o.ChangeID = &v
}

// GetRequestID returns the RequestID field value if set, zero value otherwise.
func (o *AuditEventContext) GetRequestID() string {
	if o == nil || IsNil(o.RequestID) {
		var ret string
		return ret
	}
	return *o.RequestID
}

// GetRequestIDOk returns a tuple with the RequestID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetRequestIDOk() (*string, bool) {
	if o == nil || IsNil(o.RequestID) {
		return nil, false
	}
	return o.RequestID, true
}

// HasRequestID returns a boolean if a field has been set.
func (o *AuditEventContext) HasRequestID() bool {
	if o != nil && !IsNil(o.RequestID) {
		return true
	}

	return false
}

// SetRequestID gets a reference to the given string and assigns it to the RequestID field.
func (o *AuditEventContext) SetRequestID(v string) {
	o.RequestID = &v
}

// GetTraceID returns the TraceID field value if set, zero value otherwise.
func (o *AuditEventContext) GetTraceID() string {
	if o == nil || IsNil(o.TraceID) {
		var ret string
		return ret
	}
	return *o.TraceID
}

// GetTraceIDOk returns a tuple with the TraceID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetTraceIDOk() (*string, bool) {
	if o == nil || IsNil(o.TraceID) {
		return nil, false
	}
	return o.TraceID, true
}

// HasTraceID returns a boolean if a field has been set.
func (o *AuditEventContext) HasTraceID() bool {
	if o != nil && !IsNil(o.TraceID) {
		return true
	}

	return false
}

// SetTraceID gets a reference to the given string and assigns it to the TraceID field.
func (o *AuditEventContext) SetTraceID(v string) {
	o.TraceID = &v
}

// GetSessionID returns the SessionID field value if set, zero value otherwise.
func (o *AuditEventContext) GetSessionID() string {
	if o == nil || IsNil(o.SessionID) {
		var ret string
		return ret
	}
	return *o.SessionID
}

// GetSessionIDOk returns a tuple with the SessionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetSessionIDOk() (*string, bool) {
	if o == nil || IsNil(o.SessionID) {
		return nil, false
	}
	return o.SessionID, true
}

// HasSessionID returns a boolean if a field has been set.
func (o *AuditEventContext) HasSessionID() bool {
	if o != nil && !IsNil(o.SessionID) {
		return true
	}

	return false
}

// SetSessionID gets a reference to the given string and assigns it to the SessionID field.
func (o *AuditEventContext) SetSessionID(v string) {
	o.SessionID = &v
}

// GetActor returns the Actor field value if set, zero value otherwise.
func (o *AuditEventContext) GetActor() string {
	if o == nil || IsNil(o.Actor) {
		var ret string
		return ret
	}
	return *o.Actor
}

// GetActorOk returns a tuple with the Actor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetActorOk() (*string, bool) {
	if o == nil || IsNil(o.Actor) {
		return nil, false
	}
	return o.Actor, true
}

// HasActor returns a boolean if a field has been set.
func (o *AuditEventContext) HasActor() bool {
	if o != nil && !IsNil(o.Actor) {
		return true
	}

	return false
}

// SetActor gets a reference to the given string and assigns it to the Actor field.
func (o *AuditEventContext) SetActor(v string) {
	o.Actor = &v
}

// GetActorType returns the ActorType field value if set, zero value otherwise.
func (o *AuditEventContext) GetActorType() V1MemberType {
	if o == nil || IsNil(o.ActorType) {
		var ret V1MemberType
		return ret
	}
	return *o.ActorType
}

// GetActorTypeOk returns a tuple with the ActorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetActorTypeOk() (*V1MemberType, bool) {
	if o == nil || IsNil(o.ActorType) {
		return nil, false
	}
	return o.ActorType, true
}

// HasActorType returns a boolean if a field has been set.
func (o *AuditEventContext) HasActorType() bool {
	if o != nil && !IsNil(o.ActorType) {
		return true
	}

	return false
}

// SetActorType gets a reference to the given V1MemberType and assigns it to the ActorType field.
func (o *AuditEventContext) SetActorType(v V1MemberType) {
	o.ActorType = &v
}

// GetAccessType returns the AccessType field value if set, zero value otherwise.
func (o *AuditEventContext) GetAccessType() ContextAccessType {
	if o == nil || IsNil(o.AccessType) {
		var ret ContextAccessType
		return ret
	}
	return *o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetAccessTypeOk() (*ContextAccessType, bool) {
	if o == nil || IsNil(o.AccessType) {
		return nil, false
	}
	return o.AccessType, true
}

// HasAccessType returns a boolean if a field has been set.
func (o *AuditEventContext) HasAccessType() bool {
	if o != nil && !IsNil(o.AccessType) {
		return true
	}

	return false
}

// SetAccessType gets a reference to the given ContextAccessType and assigns it to the AccessType field.
func (o *AuditEventContext) SetAccessType(v ContextAccessType) {
	o.AccessType = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *AuditEventContext) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *AuditEventContext) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *AuditEventContext) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *AuditEventContext) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *AuditEventContext) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *AuditEventContext) SetOrigin(v string) {
	o.Origin = &v
}

// GetAuthMode returns the AuthMode field value if set, zero value otherwise.
func (o *AuditEventContext) GetAuthMode() ContextAuthMode {
	if o == nil || IsNil(o.AuthMode) {
		var ret ContextAuthMode
		return ret
	}
	return *o.AuthMode
}

// GetAuthModeOk returns a tuple with the AuthMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetAuthModeOk() (*ContextAuthMode, bool) {
	if o == nil || IsNil(o.AuthMode) {
		return nil, false
	}
	return o.AuthMode, true
}

// HasAuthMode returns a boolean if a field has been set.
func (o *AuditEventContext) HasAuthMode() bool {
	if o != nil && !IsNil(o.AuthMode) {
		return true
	}

	return false
}

// SetAuthMode gets a reference to the given ContextAuthMode and assigns it to the AuthMode field.
func (o *AuditEventContext) SetAuthMode(v ContextAuthMode) {
	o.AuthMode = &v
}

// GetJwtID returns the JwtID field value if set, zero value otherwise.
func (o *AuditEventContext) GetJwtID() string {
	if o == nil || IsNil(o.JwtID) {
		var ret string
		return ret
	}
	return *o.JwtID
}

// GetJwtIDOk returns a tuple with the JwtID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetJwtIDOk() (*string, bool) {
	if o == nil || IsNil(o.JwtID) {
		return nil, false
	}
	return o.JwtID, true
}

// HasJwtID returns a boolean if a field has been set.
func (o *AuditEventContext) HasJwtID() bool {
	if o != nil && !IsNil(o.JwtID) {
		return true
	}

	return false
}

// SetJwtID gets a reference to the given string and assigns it to the JwtID field.
func (o *AuditEventContext) SetJwtID(v string) {
	o.JwtID = &v
}

// GetBearerTokenContextID returns the BearerTokenContextID field value if set, zero value otherwise.
func (o *AuditEventContext) GetBearerTokenContextID() string {
	if o == nil || IsNil(o.BearerTokenContextID) {
		var ret string
		return ret
	}
	return *o.BearerTokenContextID
}

// GetBearerTokenContextIDOk returns a tuple with the BearerTokenContextID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventContext) GetBearerTokenContextIDOk() (*string, bool) {
	if o == nil || IsNil(o.BearerTokenContextID) {
		return nil, false
	}
	return o.BearerTokenContextID, true
}

// HasBearerTokenContextID returns a boolean if a field has been set.
func (o *AuditEventContext) HasBearerTokenContextID() bool {
	if o != nil && !IsNil(o.BearerTokenContextID) {
		return true
	}

	return false
}

// SetBearerTokenContextID gets a reference to the given string and assigns it to the BearerTokenContextID field.
func (o *AuditEventContext) SetBearerTokenContextID(v string) {
	o.BearerTokenContextID = &v
}

func (o AuditEventContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditEventContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangeID) {
		toSerialize["changeID"] = o.ChangeID
	}
	if !IsNil(o.RequestID) {
		toSerialize["requestID"] = o.RequestID
	}
	if !IsNil(o.TraceID) {
		toSerialize["traceID"] = o.TraceID
	}
	if !IsNil(o.SessionID) {
		toSerialize["sessionID"] = o.SessionID
	}
	if !IsNil(o.Actor) {
		toSerialize["actor"] = o.Actor
	}
	if !IsNil(o.ActorType) {
		toSerialize["actorType"] = o.ActorType
	}
	if !IsNil(o.AccessType) {
		toSerialize["accessType"] = o.AccessType
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.AuthMode) {
		toSerialize["authMode"] = o.AuthMode
	}
	if !IsNil(o.JwtID) {
		toSerialize["jwtID"] = o.JwtID
	}
	if !IsNil(o.BearerTokenContextID) {
		toSerialize["bearerTokenContextID"] = o.BearerTokenContextID
	}
	return toSerialize, nil
}

type NullableAuditEventContext struct {
	value *AuditEventContext
	isSet bool
}

func (v NullableAuditEventContext) Get() *AuditEventContext {
	return v.value
}

func (v *NullableAuditEventContext) Set(val *AuditEventContext) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditEventContext) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditEventContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditEventContext(val *AuditEventContext) *NullableAuditEventContext {
	return &NullableAuditEventContext{value: val, isSet: true}
}

func (v NullableAuditEventContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditEventContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


