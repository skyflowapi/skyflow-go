/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the V1TokenizeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1TokenizeResponse{}

// V1TokenizeResponse struct for V1TokenizeResponse
type V1TokenizeResponse struct {
	// Tokens corresponding to the specified values.
	Records []V1TokenizeRecordResponse `json:"records,omitempty"`
}

// NewV1TokenizeResponse instantiates a new V1TokenizeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1TokenizeResponse() *V1TokenizeResponse {
	this := V1TokenizeResponse{}
	return &this
}

// NewV1TokenizeResponseWithDefaults instantiates a new V1TokenizeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TokenizeResponseWithDefaults() *V1TokenizeResponse {
	this := V1TokenizeResponse{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *V1TokenizeResponse) GetRecords() []V1TokenizeRecordResponse {
	if o == nil || IsNil(o.Records) {
		var ret []V1TokenizeRecordResponse
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TokenizeResponse) GetRecordsOk() ([]V1TokenizeRecordResponse, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *V1TokenizeResponse) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []V1TokenizeRecordResponse and assigns it to the Records field.
func (o *V1TokenizeResponse) SetRecords(v []V1TokenizeRecordResponse) {
	o.Records = v
}

func (o V1TokenizeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1TokenizeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	return toSerialize, nil
}

type NullableV1TokenizeResponse struct {
	value *V1TokenizeResponse
	isSet bool
}

func (v NullableV1TokenizeResponse) Get() *V1TokenizeResponse {
	return v.value
}

func (v *NullableV1TokenizeResponse) Set(val *V1TokenizeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TokenizeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TokenizeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TokenizeResponse(val *V1TokenizeResponse) *NullableV1TokenizeResponse {
	return &NullableV1TokenizeResponse{value: val, isSet: true}
}

func (v NullableV1TokenizeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TokenizeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


