/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the V1AuditResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1AuditResponse{}

// V1AuditResponse struct for V1AuditResponse
type V1AuditResponse struct {
	// Events matching the query.
	Event []V1AuditResponseEvent `json:"event,omitempty"`
	NextOps *V1AuditAfterOptions `json:"nextOps,omitempty"`
}

// NewV1AuditResponse instantiates a new V1AuditResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AuditResponse() *V1AuditResponse {
	this := V1AuditResponse{}
	return &this
}

// NewV1AuditResponseWithDefaults instantiates a new V1AuditResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AuditResponseWithDefaults() *V1AuditResponse {
	this := V1AuditResponse{}
	return &this
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *V1AuditResponse) GetEvent() []V1AuditResponseEvent {
	if o == nil || IsNil(o.Event) {
		var ret []V1AuditResponseEvent
		return ret
	}
	return o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuditResponse) GetEventOk() ([]V1AuditResponseEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *V1AuditResponse) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given []V1AuditResponseEvent and assigns it to the Event field.
func (o *V1AuditResponse) SetEvent(v []V1AuditResponseEvent) {
	o.Event = v
}

// GetNextOps returns the NextOps field value if set, zero value otherwise.
func (o *V1AuditResponse) GetNextOps() V1AuditAfterOptions {
	if o == nil || IsNil(o.NextOps) {
		var ret V1AuditAfterOptions
		return ret
	}
	return *o.NextOps
}

// GetNextOpsOk returns a tuple with the NextOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuditResponse) GetNextOpsOk() (*V1AuditAfterOptions, bool) {
	if o == nil || IsNil(o.NextOps) {
		return nil, false
	}
	return o.NextOps, true
}

// HasNextOps returns a boolean if a field has been set.
func (o *V1AuditResponse) HasNextOps() bool {
	if o != nil && !IsNil(o.NextOps) {
		return true
	}

	return false
}

// SetNextOps gets a reference to the given V1AuditAfterOptions and assigns it to the NextOps field.
func (o *V1AuditResponse) SetNextOps(v V1AuditAfterOptions) {
	o.NextOps = &v
}

func (o V1AuditResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1AuditResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.NextOps) {
		toSerialize["nextOps"] = o.NextOps
	}
	return toSerialize, nil
}

type NullableV1AuditResponse struct {
	value *V1AuditResponse
	isSet bool
}

func (v NullableV1AuditResponse) Get() *V1AuditResponse {
	return v.value
}

func (v *NullableV1AuditResponse) Set(val *V1AuditResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AuditResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AuditResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AuditResponse(val *V1AuditResponse) *NullableV1AuditResponse {
	return &NullableV1AuditResponse{value: val, isSet: true}
}

func (v NullableV1AuditResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AuditResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


