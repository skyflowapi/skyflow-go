/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the V1AuditResponseEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1AuditResponseEvent{}

// V1AuditResponseEvent Audit event details.
type V1AuditResponseEvent struct {
	Context *AuditEventContext           `json:"context,omitempty"`
	Request *V1AuditResponseEventRequest `json:"request,omitempty"`
	Response *V1AuditEventResponse       `json:"response,omitempty"`
	// Parent account ID of the account that made the request, if any.
	ParentAccountID *string `json:"parentAccountID,omitempty"`
	// ID of the account that made the request.
	AccountID *string `json:"accountID,omitempty"`
	// IDs for resources involved in the event. Presented in `{resourceType}/{resourceID}` format. For example, `VAULT/cd1d815aa09b4cbfbb803bd20349f202`.
	ResourceIDs []string `json:"resourceIDs,omitempty"`
}

// NewV1AuditResponseEvent instantiates a new V1AuditResponseEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AuditResponseEvent() *V1AuditResponseEvent {
	this := V1AuditResponseEvent{}
	return &this
}

// NewV1AuditResponseEventWithDefaults instantiates a new V1AuditResponseEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AuditResponseEventWithDefaults() *V1AuditResponseEvent {
	this := V1AuditResponseEvent{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *V1AuditResponseEvent) GetContext() AuditEventContext {
	if o == nil || IsNil(o.Context) {
		var ret AuditEventContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuditResponseEvent) GetContextOk() (*AuditEventContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *V1AuditResponseEvent) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given AuditEventContext and assigns it to the Context field.
func (o *V1AuditResponseEvent) SetContext(v AuditEventContext) {
	o.Context = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *V1AuditResponseEvent) GetRequest() V1AuditResponseEventRequest {
	if o == nil || IsNil(o.Request) {
		var ret V1AuditResponseEventRequest
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuditResponseEvent) GetRequestOk() (*V1AuditResponseEventRequest, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *V1AuditResponseEvent) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given V1AuditResponseEventRequest and assigns it to the Request field.
func (o *V1AuditResponseEvent) SetRequest(v V1AuditResponseEventRequest) {
	o.Request = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *V1AuditResponseEvent) GetResponse() V1AuditEventResponse {
	if o == nil || IsNil(o.Response) {
		var ret V1AuditEventResponse
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuditResponseEvent) GetResponseOk() (*V1AuditEventResponse, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *V1AuditResponseEvent) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given V1AuditEventResponse and assigns it to the Response field.
func (o *V1AuditResponseEvent) SetResponse(v V1AuditEventResponse) {
	o.Response = &v
}

// GetParentAccountID returns the ParentAccountID field value if set, zero value otherwise.
func (o *V1AuditResponseEvent) GetParentAccountID() string {
	if o == nil || IsNil(o.ParentAccountID) {
		var ret string
		return ret
	}
	return *o.ParentAccountID
}

// GetParentAccountIDOk returns a tuple with the ParentAccountID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuditResponseEvent) GetParentAccountIDOk() (*string, bool) {
	if o == nil || IsNil(o.ParentAccountID) {
		return nil, false
	}
	return o.ParentAccountID, true
}

// HasParentAccountID returns a boolean if a field has been set.
func (o *V1AuditResponseEvent) HasParentAccountID() bool {
	if o != nil && !IsNil(o.ParentAccountID) {
		return true
	}

	return false
}

// SetParentAccountID gets a reference to the given string and assigns it to the ParentAccountID field.
func (o *V1AuditResponseEvent) SetParentAccountID(v string) {
	o.ParentAccountID = &v
}

// GetAccountID returns the AccountID field value if set, zero value otherwise.
func (o *V1AuditResponseEvent) GetAccountID() string {
	if o == nil || IsNil(o.AccountID) {
		var ret string
		return ret
	}
	return *o.AccountID
}

// GetAccountIDOk returns a tuple with the AccountID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuditResponseEvent) GetAccountIDOk() (*string, bool) {
	if o == nil || IsNil(o.AccountID) {
		return nil, false
	}
	return o.AccountID, true
}

// HasAccountID returns a boolean if a field has been set.
func (o *V1AuditResponseEvent) HasAccountID() bool {
	if o != nil && !IsNil(o.AccountID) {
		return true
	}

	return false
}

// SetAccountID gets a reference to the given string and assigns it to the AccountID field.
func (o *V1AuditResponseEvent) SetAccountID(v string) {
	o.AccountID = &v
}

// GetResourceIDs returns the ResourceIDs field value if set, zero value otherwise.
func (o *V1AuditResponseEvent) GetResourceIDs() []string {
	if o == nil || IsNil(o.ResourceIDs) {
		var ret []string
		return ret
	}
	return o.ResourceIDs
}

// GetResourceIDsOk returns a tuple with the ResourceIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AuditResponseEvent) GetResourceIDsOk() ([]string, bool) {
	if o == nil || IsNil(o.ResourceIDs) {
		return nil, false
	}
	return o.ResourceIDs, true
}

// HasResourceIDs returns a boolean if a field has been set.
func (o *V1AuditResponseEvent) HasResourceIDs() bool {
	if o != nil && !IsNil(o.ResourceIDs) {
		return true
	}

	return false
}

// SetResourceIDs gets a reference to the given []string and assigns it to the ResourceIDs field.
func (o *V1AuditResponseEvent) SetResourceIDs(v []string) {
	o.ResourceIDs = v
}

func (o V1AuditResponseEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1AuditResponseEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.ParentAccountID) {
		toSerialize["parentAccountID"] = o.ParentAccountID
	}
	if !IsNil(o.AccountID) {
		toSerialize["accountID"] = o.AccountID
	}
	if !IsNil(o.ResourceIDs) {
		toSerialize["resourceIDs"] = o.ResourceIDs
	}
	return toSerialize, nil
}

type NullableV1AuditResponseEvent struct {
	value *V1AuditResponseEvent
	isSet bool
}

func (v NullableV1AuditResponseEvent) Get() *V1AuditResponseEvent {
	return v.value
}

func (v *NullableV1AuditResponseEvent) Set(val *V1AuditResponseEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AuditResponseEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AuditResponseEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AuditResponseEvent(val *V1AuditResponseEvent) *NullableV1AuditResponseEvent {
	return &NullableV1AuditResponseEvent{value: val, isSet: true}
}

func (v NullableV1AuditResponseEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AuditResponseEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


