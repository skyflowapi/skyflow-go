/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
	"fmt"
)

// RequestActionType the model 'RequestActionType'
type RequestActionType string

// List of RequestActionType
const (
	REQUESTACTIONTYPE_NONE                  RequestActionType = "NONE"
	REQUESTACTIONTYPE_ASSIGN                RequestActionType = "ASSIGN"
	REQUESTACTIONTYPE_CREATE                RequestActionType = "CREATE"
	REQUESTACTIONTYPE_DELETE                RequestActionType = "DELETE"
	REQUESTACTIONTYPE_EXECUTE               RequestActionType = "EXECUTE"
	REQUESTACTIONTYPE_LIST                  RequestActionType = "LIST"
	REQUESTACTIONTYPE_READ                  RequestActionType = "READ"
	REQUESTACTIONTYPE_UNASSIGN              RequestActionType = "UNASSIGN"
	REQUESTACTIONTYPE_UPDATE                RequestActionType = "UPDATE"
	REQUESTACTIONTYPE_VALIDATE              RequestActionType = "VALIDATE"
	REQUESTACTIONTYPE_LOGIN                 RequestActionType = "LOGIN"
	REQUESTACTIONTYPE_ROTATE                RequestActionType = "ROTATE"
	REQUESTACTIONTYPE_SCHEDULEROTATION      RequestActionType = "SCHEDULEROTATION"
	REQUESTACTIONTYPE_SCHEDULEROTATIONALERT RequestActionType = "SCHEDULEROTATIONALERT"
	REQUESTACTIONTYPE_IMPORT                RequestActionType = "IMPORT"
	REQUESTACTIONTYPE_GETIMPORTPARAMETERS   RequestActionType = "GETIMPORTPARAMETERS"
	REQUESTACTIONTYPE_PING                  RequestActionType = "PING"
	REQUESTACTIONTYPE_GETCLOUDPROVIDER      RequestActionType = "GETCLOUDPROVIDER"
)

// All allowed values of RequestActionType enum
var AllowedRequestActionTypeEnumValues = []RequestActionType{
	"NONE",
	"ASSIGN",
	"CREATE",
	"DELETE",
	"EXECUTE",
	"LIST",
	"READ",
	"UNASSIGN",
	"UPDATE",
	"VALIDATE",
	"LOGIN",
	"ROTATE",
	"SCHEDULEROTATION",
	"SCHEDULEROTATIONALERT",
	"IMPORT",
	"GETIMPORTPARAMETERS",
	"PING",
	"GETCLOUDPROVIDER",
}

func (v *RequestActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestActionType(value)
	for _, existing := range AllowedRequestActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestActionType", value)
}

// NewRequestActionTypeFromValue returns a pointer to a valid RequestActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestActionTypeFromValue(v string) (*RequestActionType, error) {
	ev := RequestActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestActionType: valid values are %v", v, AllowedRequestActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestActionType) IsValid() bool {
	for _, existing := range AllowedRequestActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequestActionType value
func (v RequestActionType) Ptr() *RequestActionType {
	return &v
}

type NullableRequestActionType struct {
	value *RequestActionType
	isSet bool
}

func (v NullableRequestActionType) Get() *RequestActionType {
	return v.value
}

func (v *NullableRequestActionType) Set(val *RequestActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestActionType(val *RequestActionType) *NullableRequestActionType {
	return &NullableRequestActionType{value: val, isSet: true}
}

func (v NullableRequestActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

