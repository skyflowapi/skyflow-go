/*
Skyflow Data API

# Data API  This API inserts, retrieves, and otherwise manages data in a vaultapi.  The Data API is available from two base URIs. *identifier* is the identifier in your vaultapi's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vaultapi.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vaultapi.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

API version: v1
Contact: support@skyflow.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vaultapi

import (
	"encoding/json"
)

// checks if the V1FieldRecords type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1FieldRecords{}

// V1FieldRecords Record values and tokens.
type V1FieldRecords struct {
	// Fields and values for the record. For example, `{'field_1':'value_1', 'field_2':'value_2'}`.
	Fields map[string]interface{} `json:"fields,omitempty"`
	// Fields and tokens for the record. For example, `{'field_1':'token_1', 'field_2':'token_2'}`.
	Tokens map[string]interface{} `json:"tokens,omitempty"`
}

// NewV1FieldRecords instantiates a new V1FieldRecords object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1FieldRecords() *V1FieldRecords {
	this := V1FieldRecords{}
	return &this
}

// NewV1FieldRecordsWithDefaults instantiates a new V1FieldRecords object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1FieldRecordsWithDefaults() *V1FieldRecords {
	this := V1FieldRecords{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *V1FieldRecords) GetFields() map[string]interface{} {
	if o == nil || IsNil(o.Fields) {
		var ret map[string]interface{}
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FieldRecords) GetFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Fields) {
		return map[string]interface{}{}, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *V1FieldRecords) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]interface{} and assigns it to the Fields field.
func (o *V1FieldRecords) SetFields(v map[string]interface{}) {
	o.Fields = v
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *V1FieldRecords) GetTokens() map[string]interface{} {
	if o == nil || IsNil(o.Tokens) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FieldRecords) GetTokensOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tokens) {
		return map[string]interface{}{}, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *V1FieldRecords) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given map[string]interface{} and assigns it to the Tokens field.
func (o *V1FieldRecords) SetTokens(v map[string]interface{}) {
	o.Tokens = v
}

func (o V1FieldRecords) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1FieldRecords) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	return toSerialize, nil
}

type NullableV1FieldRecords struct {
	value *V1FieldRecords
	isSet bool
}

func (v NullableV1FieldRecords) Get() *V1FieldRecords {
	return v.value
}

func (v *NullableV1FieldRecords) Set(val *V1FieldRecords) {
	v.value = val
	v.isSet = true
}

func (v NullableV1FieldRecords) IsSet() bool {
	return v.isSet
}

func (v *NullableV1FieldRecords) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1FieldRecords(val *V1FieldRecords) *NullableV1FieldRecords {
	return &NullableV1FieldRecords{value: val, isSet: true}
}

func (v NullableV1FieldRecords) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1FieldRecords) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


