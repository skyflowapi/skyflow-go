// Code generated by Fern. DO NOT EDIT.

package recordservice

import (
	context "context"
	http "net/http"

	core "github.com/skyflowapi/skyflow-go/core"
	internal "github.com/skyflowapi/skyflow-go/internal"
	option "github.com/skyflowapi/skyflow-go/option"
	skyflow "github.com/skyflowapi/skyflow-go/api"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (c *Client) Delete(
	ctx context.Context,
	request *skyflow.DeleteRequest,
	opts ...option.RequestOption,
) (*skyflow.DeleteResponse, error) {
	response, err := c.WithRawResponse.Delete(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Get(
	ctx context.Context,
	request *skyflow.GetRequest,
	opts ...option.RequestOption,
) (*skyflow.GetResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Insert(
	ctx context.Context,
	request *skyflow.InsertRequest,
	opts ...option.RequestOption,
) (*skyflow.InsertResponse, error) {
	response, err := c.WithRawResponse.Insert(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Update(
	ctx context.Context,
	request *skyflow.UpdateRequest,
	opts ...option.RequestOption,
) (*skyflow.UpdateResponse, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Deletetoken(
	ctx context.Context,
	request *skyflow.DeleteTokenRequest,
	opts ...option.RequestOption,
) (*skyflow.DeleteTokenResponse, error) {
	response, err := c.WithRawResponse.Deletetoken(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Detokenize(
	ctx context.Context,
	request *skyflow.DetokenizeRequest,
	opts ...option.RequestOption,
) (*skyflow.DetokenizeResponse, error) {
	response, err := c.WithRawResponse.Detokenize(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Tokenize(
	ctx context.Context,
	request *skyflow.TokenizeRequest,
	opts ...option.RequestOption,
) (*skyflow.TokenizeResponse, error) {
	response, err := c.WithRawResponse.Tokenize(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
